
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f98  08007058  08007058  00017058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ff0  08009ff0  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ff8  08009ff8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ff8  08009ff8  00019ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ffc  08009ffc  00019ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  0800a000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          0000025c  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002199c  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044a9  00000000  00000000  000419f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  00045ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001420  00000000  00000000  00047480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000251b8  00000000  00000000  000488a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e32e  00000000  00000000  0006da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3377  00000000  00000000  0008bd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015f0fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005934  00000000  00000000  0015f150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007040 	.word	0x08007040

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	08007040 	.word	0x08007040

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <alarm_fsm>:
#define ON	0
#define OFF	1

uint8_t alarmledstate=OFF;

void alarm_fsm(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af04      	add	r7, sp, #16
	switch(alarmclkstate){
 80004c6:	4b93      	ldr	r3, [pc, #588]	; (8000714 <alarm_fsm+0x254>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b08      	cmp	r3, #8
 80004cc:	f200 811f 	bhi.w	800070e <alarm_fsm+0x24e>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <alarm_fsm+0x18>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	08000523 	.word	0x08000523
 80004dc:	08000569 	.word	0x08000569
 80004e0:	080005af 	.word	0x080005af
 80004e4:	080005f5 	.word	0x080005f5
 80004e8:	0800063b 	.word	0x0800063b
 80004ec:	08000681 	.word	0x08000681
 80004f0:	080006c7 	.word	0x080006c7
 80004f4:	080004fd 	.word	0x080004fd
 80004f8:	08000511 	.word	0x08000511
	case INIT:
		updateAlarm();
 80004fc:	f000 fc28 	bl	8000d50 <updateAlarm>
		ds3231_ReadTime();
 8000500:	f000 faf2 	bl	8000ae8 <ds3231_ReadTime>
		displayTime();
 8000504:	f000 fc84 	bl	8000e10 <displayTime>
		alarmclkstate=SEC;
 8000508:	4b82      	ldr	r3, [pc, #520]	; (8000714 <alarm_fsm+0x254>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
		break;
 800050e:	e0fe      	b.n	800070e <alarm_fsm+0x24e>
	case HOLD:
		if(mode==ALARM_M) alarmclkstate=INIT;
 8000510:	4b81      	ldr	r3, [pc, #516]	; (8000718 <alarm_fsm+0x258>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b02      	cmp	r3, #2
 8000516:	f040 80f9 	bne.w	800070c <alarm_fsm+0x24c>
 800051a:	4b7e      	ldr	r3, [pc, #504]	; (8000714 <alarm_fsm+0x254>)
 800051c:	2207      	movs	r2, #7
 800051e:	701a      	strb	r2, [r3, #0]
		break;
 8000520:	e0f4      	b.n	800070c <alarm_fsm+0x24c>
	case SEC:
		alarmButtonHandler(SEC, MIN);
 8000522:	2101      	movs	r1, #1
 8000524:	2000      	movs	r0, #0
 8000526:	f000 f8fb 	bl	8000720 <alarmButtonHandler>
		lcd_ShowIntNum (150 ,130 , alarmvals[YEAR] ,2, YELLOW ,BLACK ,24);
 800052a:	4b7c      	ldr	r3, [pc, #496]	; (800071c <alarm_fsm+0x25c>)
 800052c:	799b      	ldrb	r3, [r3, #6]
 800052e:	b29a      	uxth	r2, r3
 8000530:	2318      	movs	r3, #24
 8000532:	9302      	str	r3, [sp, #8]
 8000534:	2300      	movs	r3, #0
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2302      	movs	r3, #2
 8000540:	2182      	movs	r1, #130	; 0x82
 8000542:	2096      	movs	r0, #150	; 0x96
 8000544:	f001 f80c 	bl	8001560 <lcd_ShowIntNum>
		alarmBlinkCLKHandler(150 ,100 , alarmvals[SEC] ,2, GREEN ,BLACK ,24);
 8000548:	4b74      	ldr	r3, [pc, #464]	; (800071c <alarm_fsm+0x25c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	2318      	movs	r3, #24
 8000550:	9302      	str	r3, [sp, #8]
 8000552:	2300      	movs	r3, #0
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2302      	movs	r3, #2
 800055e:	2164      	movs	r1, #100	; 0x64
 8000560:	2096      	movs	r0, #150	; 0x96
 8000562:	f000 f92d 	bl	80007c0 <alarmBlinkCLKHandler>
		break;
 8000566:	e0d2      	b.n	800070e <alarm_fsm+0x24e>
	case MIN:
		alarmButtonHandler(MIN, HOUR);
 8000568:	2102      	movs	r1, #2
 800056a:	2001      	movs	r0, #1
 800056c:	f000 f8d8 	bl	8000720 <alarmButtonHandler>
		lcd_ShowIntNum (150 ,100 , alarmvals[SEC] ,2, GREEN ,BLACK ,24);
 8000570:	4b6a      	ldr	r3, [pc, #424]	; (800071c <alarm_fsm+0x25c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b29a      	uxth	r2, r3
 8000576:	2318      	movs	r3, #24
 8000578:	9302      	str	r3, [sp, #8]
 800057a:	2300      	movs	r3, #0
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2302      	movs	r3, #2
 8000586:	2164      	movs	r1, #100	; 0x64
 8000588:	2096      	movs	r0, #150	; 0x96
 800058a:	f000 ffe9 	bl	8001560 <lcd_ShowIntNum>
		alarmBlinkCLKHandler(110 ,100 , alarmvals[MIN] ,2, GREEN ,BLACK ,24);
 800058e:	4b63      	ldr	r3, [pc, #396]	; (800071c <alarm_fsm+0x25c>)
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	461a      	mov	r2, r3
 8000594:	2318      	movs	r3, #24
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	2300      	movs	r3, #0
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2302      	movs	r3, #2
 80005a4:	2164      	movs	r1, #100	; 0x64
 80005a6:	206e      	movs	r0, #110	; 0x6e
 80005a8:	f000 f90a 	bl	80007c0 <alarmBlinkCLKHandler>
		break;
 80005ac:	e0af      	b.n	800070e <alarm_fsm+0x24e>
	case HOUR:
		alarmButtonHandler(HOUR, DAY);
 80005ae:	2103      	movs	r1, #3
 80005b0:	2002      	movs	r0, #2
 80005b2:	f000 f8b5 	bl	8000720 <alarmButtonHandler>
		lcd_ShowIntNum (110 ,100 , alarmvals[MIN] ,2, GREEN ,BLACK ,24);
 80005b6:	4b59      	ldr	r3, [pc, #356]	; (800071c <alarm_fsm+0x25c>)
 80005b8:	785b      	ldrb	r3, [r3, #1]
 80005ba:	b29a      	uxth	r2, r3
 80005bc:	2318      	movs	r3, #24
 80005be:	9302      	str	r3, [sp, #8]
 80005c0:	2300      	movs	r3, #0
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2302      	movs	r3, #2
 80005cc:	2164      	movs	r1, #100	; 0x64
 80005ce:	206e      	movs	r0, #110	; 0x6e
 80005d0:	f000 ffc6 	bl	8001560 <lcd_ShowIntNum>
		alarmBlinkCLKHandler(70 ,100 ,alarmvals[HOUR] ,2, GREEN ,BLACK ,24) ;
 80005d4:	4b51      	ldr	r3, [pc, #324]	; (800071c <alarm_fsm+0x25c>)
 80005d6:	789b      	ldrb	r3, [r3, #2]
 80005d8:	461a      	mov	r2, r3
 80005da:	2318      	movs	r3, #24
 80005dc:	9302      	str	r3, [sp, #8]
 80005de:	2300      	movs	r3, #0
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2302      	movs	r3, #2
 80005ea:	2164      	movs	r1, #100	; 0x64
 80005ec:	2046      	movs	r0, #70	; 0x46
 80005ee:	f000 f8e7 	bl	80007c0 <alarmBlinkCLKHandler>
		break;
 80005f2:	e08c      	b.n	800070e <alarm_fsm+0x24e>
	case DAY:
		alarmButtonHandler(DAY, DATE);
 80005f4:	2104      	movs	r1, #4
 80005f6:	2003      	movs	r0, #3
 80005f8:	f000 f892 	bl	8000720 <alarmButtonHandler>
		lcd_ShowIntNum (70 ,100 , alarmvals[HOUR] ,2, GREEN ,BLACK ,24);
 80005fc:	4b47      	ldr	r3, [pc, #284]	; (800071c <alarm_fsm+0x25c>)
 80005fe:	789b      	ldrb	r3, [r3, #2]
 8000600:	b29a      	uxth	r2, r3
 8000602:	2318      	movs	r3, #24
 8000604:	9302      	str	r3, [sp, #8]
 8000606:	2300      	movs	r3, #0
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2302      	movs	r3, #2
 8000612:	2164      	movs	r1, #100	; 0x64
 8000614:	2046      	movs	r0, #70	; 0x46
 8000616:	f000 ffa3 	bl	8001560 <lcd_ShowIntNum>
		alarmBlinkCLKHandler(20 ,130 , alarmvals[DAY] ,2, YELLOW ,BLACK ,24) ;
 800061a:	4b40      	ldr	r3, [pc, #256]	; (800071c <alarm_fsm+0x25c>)
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	461a      	mov	r2, r3
 8000620:	2318      	movs	r3, #24
 8000622:	9302      	str	r3, [sp, #8]
 8000624:	2300      	movs	r3, #0
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2302      	movs	r3, #2
 8000630:	2182      	movs	r1, #130	; 0x82
 8000632:	2014      	movs	r0, #20
 8000634:	f000 f8c4 	bl	80007c0 <alarmBlinkCLKHandler>
		break;
 8000638:	e069      	b.n	800070e <alarm_fsm+0x24e>
	case DATE:
		alarmButtonHandler(DATE, MONTH);
 800063a:	2105      	movs	r1, #5
 800063c:	2004      	movs	r0, #4
 800063e:	f000 f86f 	bl	8000720 <alarmButtonHandler>
		lcd_ShowIntNum (20 ,130 , alarmvals[DAY] ,2, YELLOW ,BLACK ,24);
 8000642:	4b36      	ldr	r3, [pc, #216]	; (800071c <alarm_fsm+0x25c>)
 8000644:	78db      	ldrb	r3, [r3, #3]
 8000646:	b29a      	uxth	r2, r3
 8000648:	2318      	movs	r3, #24
 800064a:	9302      	str	r3, [sp, #8]
 800064c:	2300      	movs	r3, #0
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000654:	9300      	str	r3, [sp, #0]
 8000656:	2302      	movs	r3, #2
 8000658:	2182      	movs	r1, #130	; 0x82
 800065a:	2014      	movs	r0, #20
 800065c:	f000 ff80 	bl	8001560 <lcd_ShowIntNum>
		alarmBlinkCLKHandler(70 ,130 , alarmvals[DATE] ,2, YELLOW ,BLACK ,24) ;
 8000660:	4b2e      	ldr	r3, [pc, #184]	; (800071c <alarm_fsm+0x25c>)
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	461a      	mov	r2, r3
 8000666:	2318      	movs	r3, #24
 8000668:	9302      	str	r3, [sp, #8]
 800066a:	2300      	movs	r3, #0
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	2302      	movs	r3, #2
 8000676:	2182      	movs	r1, #130	; 0x82
 8000678:	2046      	movs	r0, #70	; 0x46
 800067a:	f000 f8a1 	bl	80007c0 <alarmBlinkCLKHandler>
		break;
 800067e:	e046      	b.n	800070e <alarm_fsm+0x24e>
	case MONTH:
		alarmButtonHandler(MONTH, YEAR);
 8000680:	2106      	movs	r1, #6
 8000682:	2005      	movs	r0, #5
 8000684:	f000 f84c 	bl	8000720 <alarmButtonHandler>
		lcd_ShowIntNum (70 ,130 , alarmvals[DATE] ,2, YELLOW ,BLACK ,24);
 8000688:	4b24      	ldr	r3, [pc, #144]	; (800071c <alarm_fsm+0x25c>)
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	b29a      	uxth	r2, r3
 800068e:	2318      	movs	r3, #24
 8000690:	9302      	str	r3, [sp, #8]
 8000692:	2300      	movs	r3, #0
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2302      	movs	r3, #2
 800069e:	2182      	movs	r1, #130	; 0x82
 80006a0:	2046      	movs	r0, #70	; 0x46
 80006a2:	f000 ff5d 	bl	8001560 <lcd_ShowIntNum>
		alarmBlinkCLKHandler(110 ,130 , alarmvals[MONTH] ,2, YELLOW ,BLACK ,24) ;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <alarm_fsm+0x25c>)
 80006a8:	795b      	ldrb	r3, [r3, #5]
 80006aa:	461a      	mov	r2, r3
 80006ac:	2318      	movs	r3, #24
 80006ae:	9302      	str	r3, [sp, #8]
 80006b0:	2300      	movs	r3, #0
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80006b8:	9300      	str	r3, [sp, #0]
 80006ba:	2302      	movs	r3, #2
 80006bc:	2182      	movs	r1, #130	; 0x82
 80006be:	206e      	movs	r0, #110	; 0x6e
 80006c0:	f000 f87e 	bl	80007c0 <alarmBlinkCLKHandler>
		break;
 80006c4:	e023      	b.n	800070e <alarm_fsm+0x24e>
	case YEAR:
		alarmButtonHandler(YEAR, SEC);
 80006c6:	2100      	movs	r1, #0
 80006c8:	2006      	movs	r0, #6
 80006ca:	f000 f829 	bl	8000720 <alarmButtonHandler>
		lcd_ShowIntNum (110 ,130 , alarmvals[MONTH] ,2, YELLOW ,BLACK ,24);
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <alarm_fsm+0x25c>)
 80006d0:	795b      	ldrb	r3, [r3, #5]
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	2318      	movs	r3, #24
 80006d6:	9302      	str	r3, [sp, #8]
 80006d8:	2300      	movs	r3, #0
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2302      	movs	r3, #2
 80006e4:	2182      	movs	r1, #130	; 0x82
 80006e6:	206e      	movs	r0, #110	; 0x6e
 80006e8:	f000 ff3a 	bl	8001560 <lcd_ShowIntNum>
		alarmBlinkCLKHandler(150 ,130 , alarmvals[YEAR] ,2, YELLOW ,BLACK ,24) ;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <alarm_fsm+0x25c>)
 80006ee:	799b      	ldrb	r3, [r3, #6]
 80006f0:	461a      	mov	r2, r3
 80006f2:	2318      	movs	r3, #24
 80006f4:	9302      	str	r3, [sp, #8]
 80006f6:	2300      	movs	r3, #0
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2302      	movs	r3, #2
 8000702:	2182      	movs	r1, #130	; 0x82
 8000704:	2096      	movs	r0, #150	; 0x96
 8000706:	f000 f85b 	bl	80007c0 <alarmBlinkCLKHandler>
		break;
 800070a:	e000      	b.n	800070e <alarm_fsm+0x24e>
		break;
 800070c:	bf00      	nop
	}
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000000 	.word	0x20000000
 8000718:	2000004c 	.word	0x2000004c
 800071c:	2000000c 	.word	0x2000000c

08000720 <alarmButtonHandler>:

void alarmButtonHandler(enum ALARMCLOCKSTATE curState,enum ALARMCLOCKSTATE nextState){
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	460a      	mov	r2, r1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	4613      	mov	r3, r2
 800072e:	71bb      	strb	r3, [r7, #6]
	if(FLAG_BUT_CD==1){
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <alarmButtonHandler+0x88>)
 8000732:	885b      	ldrh	r3, [r3, #2]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d133      	bne.n	80007a0 <alarmButtonHandler+0x80>
		if(button_count[0]==1){
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <alarmButtonHandler+0x8c>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d106      	bne.n	800074e <alarmButtonHandler+0x2e>
			mode=AUTO_M;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <alarmButtonHandler+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
			alarmclkstate=HOLD;
 8000746:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <alarmButtonHandler+0x94>)
 8000748:	2208      	movs	r2, #8
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	e025      	b.n	800079a <alarmButtonHandler+0x7a>
		}
		else if(button_count[12]==1){
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <alarmButtonHandler+0x8c>)
 8000750:	8b1b      	ldrh	r3, [r3, #24]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d103      	bne.n	800075e <alarmButtonHandler+0x3e>
			alarmclkstate=nextState;
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <alarmButtonHandler+0x94>)
 8000758:	79bb      	ldrb	r3, [r7, #6]
 800075a:	7013      	strb	r3, [r2, #0]
 800075c:	e01d      	b.n	800079a <alarmButtonHandler+0x7a>
		}
		else if(button_count[3]==1){
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <alarmButtonHandler+0x8c>)
 8000760:	88db      	ldrh	r3, [r3, #6]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d103      	bne.n	800076e <alarmButtonHandler+0x4e>
			flag_inc_press=1;
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <alarmButtonHandler+0x98>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e015      	b.n	800079a <alarmButtonHandler+0x7a>
		}
		else if(button_count[3]==0 && flag_inc_press==1){
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <alarmButtonHandler+0x8c>)
 8000770:	88db      	ldrh	r3, [r3, #6]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d111      	bne.n	800079a <alarmButtonHandler+0x7a>
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <alarmButtonHandler+0x98>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d10d      	bne.n	800079a <alarmButtonHandler+0x7a>
			flag_inc_press=0;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <alarmButtonHandler+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
			alarmvals[curState]++;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <alarmButtonHandler+0x9c>)
 8000788:	5cd2      	ldrb	r2, [r2, r3]
 800078a:	3201      	adds	r2, #1
 800078c:	b2d1      	uxtb	r1, r2
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <alarmButtonHandler+0x9c>)
 8000790:	54d1      	strb	r1, [r2, r3]
			alarmTimeDurationHandler();
 8000792:	f000 f869 	bl	8000868 <alarmTimeDurationHandler>
			updateAlarm();
 8000796:	f000 fadb 	bl	8000d50 <updateAlarm>
		}
		setbutCooldownTimer(50);
 800079a:	2032      	movs	r0, #50	; 0x32
 800079c:	f001 fdb6 	bl	800230c <setbutCooldownTimer>
	}
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000160 	.word	0x20000160
 80007ac:	20000050 	.word	0x20000050
 80007b0:	2000004c 	.word	0x2000004c
 80007b4:	20000000 	.word	0x20000000
 80007b8:	2000004d 	.word	0x2000004d
 80007bc:	2000000c 	.word	0x2000000c

080007c0 <alarmBlinkCLKHandler>:

void alarmBlinkCLKHandler(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey){
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af04      	add	r7, sp, #16
 80007c6:	4604      	mov	r4, r0
 80007c8:	4608      	mov	r0, r1
 80007ca:	4611      	mov	r1, r2
 80007cc:	461a      	mov	r2, r3
 80007ce:	4623      	mov	r3, r4
 80007d0:	80fb      	strh	r3, [r7, #6]
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]
 80007d6:	460b      	mov	r3, r1
 80007d8:	807b      	strh	r3, [r7, #2]
 80007da:	4613      	mov	r3, r2
 80007dc:	707b      	strb	r3, [r7, #1]
	switch(alarmledstate){
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <alarmBlinkCLKHandler+0xa0>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <alarmBlinkCLKHandler+0x2c>
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d019      	beq.n	800081e <alarmBlinkCLKHandler+0x5e>
			lcd_ShowIntNum (x,y,num,len,BLACK,bc,sizey);
			setblinkCLKnumTimer(250);
		}
		break;
	}
}
 80007ea:	e034      	b.n	8000856 <alarmBlinkCLKHandler+0x96>
		if(FLAG_BLINK_NUM==1){
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <alarmBlinkCLKHandler+0xa4>)
 80007ee:	88db      	ldrh	r3, [r3, #6]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d12d      	bne.n	8000850 <alarmBlinkCLKHandler+0x90>
			alarmledstate=OFF;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <alarmBlinkCLKHandler+0xa0>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum (x,y,num,len,fc,bc,sizey);
 80007fa:	787c      	ldrb	r4, [r7, #1]
 80007fc:	887a      	ldrh	r2, [r7, #2]
 80007fe:	88b9      	ldrh	r1, [r7, #4]
 8000800:	88f8      	ldrh	r0, [r7, #6]
 8000802:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000806:	9302      	str	r3, [sp, #8]
 8000808:	8bbb      	ldrh	r3, [r7, #28]
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	8b3b      	ldrh	r3, [r7, #24]
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	4623      	mov	r3, r4
 8000812:	f000 fea5 	bl	8001560 <lcd_ShowIntNum>
			setblinkCLKnumTimer(250);
 8000816:	20fa      	movs	r0, #250	; 0xfa
 8000818:	f001 fdb0 	bl	800237c <setblinkCLKnumTimer>
		break;
 800081c:	e018      	b.n	8000850 <alarmBlinkCLKHandler+0x90>
		if(FLAG_BLINK_NUM==1){
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <alarmBlinkCLKHandler+0xa4>)
 8000820:	88db      	ldrh	r3, [r3, #6]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d116      	bne.n	8000854 <alarmBlinkCLKHandler+0x94>
			alarmledstate=ON;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <alarmBlinkCLKHandler+0xa0>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum (x,y,num,len,BLACK,bc,sizey);
 800082c:	787c      	ldrb	r4, [r7, #1]
 800082e:	887a      	ldrh	r2, [r7, #2]
 8000830:	88b9      	ldrh	r1, [r7, #4]
 8000832:	88f8      	ldrh	r0, [r7, #6]
 8000834:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000838:	9302      	str	r3, [sp, #8]
 800083a:	8bbb      	ldrh	r3, [r7, #28]
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	2300      	movs	r3, #0
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	4623      	mov	r3, r4
 8000844:	f000 fe8c 	bl	8001560 <lcd_ShowIntNum>
			setblinkCLKnumTimer(250);
 8000848:	20fa      	movs	r0, #250	; 0xfa
 800084a:	f001 fd97 	bl	800237c <setblinkCLKnumTimer>
		break;
 800084e:	e001      	b.n	8000854 <alarmBlinkCLKHandler+0x94>
		break;
 8000850:	bf00      	nop
 8000852:	e000      	b.n	8000856 <alarmBlinkCLKHandler+0x96>
		break;
 8000854:	bf00      	nop
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	bf00      	nop
 8000860:	20000001 	.word	0x20000001
 8000864:	20000160 	.word	0x20000160

08000868 <alarmTimeDurationHandler>:
void alarmTimeDurationHandler(){
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	switch(alarmclkstate){
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <alarmTimeDurationHandler+0xbc>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b08      	cmp	r3, #8
 8000872:	d852      	bhi.n	800091a <alarmTimeDurationHandler+0xb2>
 8000874:	a201      	add	r2, pc, #4	; (adr r2, 800087c <alarmTimeDurationHandler+0x14>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	080008a1 	.word	0x080008a1
 8000880:	080008b1 	.word	0x080008b1
 8000884:	080008c1 	.word	0x080008c1
 8000888:	080008d1 	.word	0x080008d1
 800088c:	080008e1 	.word	0x080008e1
 8000890:	080008f1 	.word	0x080008f1
 8000894:	08000901 	.word	0x08000901
 8000898:	08000901 	.word	0x08000901
 800089c:	08000901 	.word	0x08000901
	case INIT:
		break;
	case HOLD:
		break;
	case SEC:
		if(alarmvals[SEC]>60) alarmvals[SEC]=0;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b3c      	cmp	r3, #60	; 0x3c
 80008a6:	d92d      	bls.n	8000904 <alarmTimeDurationHandler+0x9c>
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
		break;
 80008ae:	e029      	b.n	8000904 <alarmTimeDurationHandler+0x9c>
	case MIN:
		if(alarmvals[MIN]>60) alarmvals[MIN]=0;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008b2:	785b      	ldrb	r3, [r3, #1]
 80008b4:	2b3c      	cmp	r3, #60	; 0x3c
 80008b6:	d927      	bls.n	8000908 <alarmTimeDurationHandler+0xa0>
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	705a      	strb	r2, [r3, #1]
		break;
 80008be:	e023      	b.n	8000908 <alarmTimeDurationHandler+0xa0>
	case HOUR:
		if(alarmvals[HOUR]>60) alarmvals[HOUR]=0;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	2b3c      	cmp	r3, #60	; 0x3c
 80008c6:	d921      	bls.n	800090c <alarmTimeDurationHandler+0xa4>
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	709a      	strb	r2, [r3, #2]
		break;
 80008ce:	e01d      	b.n	800090c <alarmTimeDurationHandler+0xa4>
	case DAY:
		if(alarmvals[DAY]>8) alarmvals[DAY]=2;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008d2:	78db      	ldrb	r3, [r3, #3]
 80008d4:	2b08      	cmp	r3, #8
 80008d6:	d91b      	bls.n	8000910 <alarmTimeDurationHandler+0xa8>
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008da:	2202      	movs	r2, #2
 80008dc:	70da      	strb	r2, [r3, #3]
		break;
 80008de:	e017      	b.n	8000910 <alarmTimeDurationHandler+0xa8>
	case DATE:
		if(alarmvals[DATE]>31) alarmvals[DATE]=1;
 80008e0:	4b11      	ldr	r3, [pc, #68]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008e2:	791b      	ldrb	r3, [r3, #4]
 80008e4:	2b1f      	cmp	r3, #31
 80008e6:	d915      	bls.n	8000914 <alarmTimeDurationHandler+0xac>
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	711a      	strb	r2, [r3, #4]
		break;
 80008ee:	e011      	b.n	8000914 <alarmTimeDurationHandler+0xac>
	case MONTH:
		if(alarmvals[MONTH]>12) alarmvals[MONTH]=1;
 80008f0:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008f2:	795b      	ldrb	r3, [r3, #5]
 80008f4:	2b0c      	cmp	r3, #12
 80008f6:	d90f      	bls.n	8000918 <alarmTimeDurationHandler+0xb0>
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <alarmTimeDurationHandler+0xc0>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	715a      	strb	r2, [r3, #5]
		break;
 80008fe:	e00b      	b.n	8000918 <alarmTimeDurationHandler+0xb0>
	case YEAR:
		break;
 8000900:	bf00      	nop
 8000902:	e00a      	b.n	800091a <alarmTimeDurationHandler+0xb2>
		break;
 8000904:	bf00      	nop
 8000906:	e008      	b.n	800091a <alarmTimeDurationHandler+0xb2>
		break;
 8000908:	bf00      	nop
 800090a:	e006      	b.n	800091a <alarmTimeDurationHandler+0xb2>
		break;
 800090c:	bf00      	nop
 800090e:	e004      	b.n	800091a <alarmTimeDurationHandler+0xb2>
		break;
 8000910:	bf00      	nop
 8000912:	e002      	b.n	800091a <alarmTimeDurationHandler+0xb2>
		break;
 8000914:	bf00      	nop
 8000916:	e000      	b.n	800091a <alarmTimeDurationHandler+0xb2>
		break;
 8000918:	bf00      	nop
	}
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20000000 	.word	0x20000000
 8000928:	2000000c 	.word	0x2000000c

0800092c <button_init>:

#define HOLD_COUNTER	400
uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000930:	2201      	movs	r2, #1
 8000932:	2108      	movs	r1, #8
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <button_init+0x14>)
 8000936:	f002 fc11 	bl	800315c <HAL_GPIO_WritePin>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40020c00 	.word	0x40020c00

08000944 <button_Scan>:

void button_Scan(){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2108      	movs	r1, #8
 800094e:	482f      	ldr	r0, [pc, #188]	; (8000a0c <button_Scan+0xc8>)
 8000950:	f002 fc04 	bl	800315c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	2108      	movs	r1, #8
 8000958:	482c      	ldr	r0, [pc, #176]	; (8000a0c <button_Scan+0xc8>)
 800095a:	f002 fbff 	bl	800315c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 800095e:	230a      	movs	r3, #10
 8000960:	2202      	movs	r2, #2
 8000962:	492b      	ldr	r1, [pc, #172]	; (8000a10 <button_Scan+0xcc>)
 8000964:	482b      	ldr	r0, [pc, #172]	; (8000a14 <button_Scan+0xd0>)
 8000966:	f004 f9fe 	bl	8004d66 <HAL_SPI_Receive>
	  int button_index = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800096e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000972:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	e03f      	b.n	80009fa <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db06      	blt.n	800098e <button_Scan+0x4a>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b03      	cmp	r3, #3
 8000984:	dc03      	bgt.n	800098e <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3304      	adds	r3, #4
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e018      	b.n	80009c0 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b03      	cmp	r3, #3
 8000992:	dd07      	ble.n	80009a4 <button_Scan+0x60>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b07      	cmp	r3, #7
 8000998:	dc04      	bgt.n	80009a4 <button_Scan+0x60>
			  button_index = 7 - i;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	f1c3 0307 	rsb	r3, r3, #7
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	e00d      	b.n	80009c0 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b07      	cmp	r3, #7
 80009a8:	dd06      	ble.n	80009b8 <button_Scan+0x74>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0b      	cmp	r3, #11
 80009ae:	dc03      	bgt.n	80009b8 <button_Scan+0x74>
			  button_index = i + 4;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3304      	adds	r3, #4
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e003      	b.n	80009c0 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f1c3 0317 	rsb	r3, r3, #23
 80009be:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask){
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <button_Scan+0xcc>)
 80009c2:	881a      	ldrh	r2, [r3, #0]
 80009c4:	897b      	ldrh	r3, [r7, #10]
 80009c6:	4013      	ands	r3, r2
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d005      	beq.n	80009da <button_Scan+0x96>
			  button_count[button_index] = 0;
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <button_Scan+0xd4>)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2100      	movs	r1, #0
 80009d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009d8:	e009      	b.n	80009ee <button_Scan+0xaa>
		  }
		  else {
			  button_count[button_index]++;
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <button_Scan+0xd4>)
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009e2:	3301      	adds	r3, #1
 80009e4:	b299      	uxth	r1, r3
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <button_Scan+0xd4>)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  }
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80009ee:	897b      	ldrh	r3, [r7, #10]
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3301      	adds	r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b0f      	cmp	r3, #15
 80009fe:	ddbc      	ble.n	800097a <button_Scan+0x36>
	  }
}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40020c00 	.word	0x40020c00
 8000a10:	20000044 	.word	0x20000044
 8000a14:	2000019c 	.word	0x2000019c
 8000a18:	20000050 	.word	0x20000050

08000a1c <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 8000a20:	201e      	movs	r0, #30
 8000a22:	f001 ff77 	bl	8002914 <DEC2BCD>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <ds3231_init+0x80>)
 8000a2c:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 8000a2e:	2016      	movs	r0, #22
 8000a30:	f001 ff70 	bl	8002914 <DEC2BCD>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <ds3231_init+0x80>)
 8000a3a:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 8000a3c:	2015      	movs	r0, #21
 8000a3e:	f001 ff69 	bl	8002914 <DEC2BCD>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <ds3231_init+0x80>)
 8000a48:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 8000a4a:	2006      	movs	r0, #6
 8000a4c:	f001 ff62 	bl	8002914 <DEC2BCD>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <ds3231_init+0x80>)
 8000a56:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000a58:	200f      	movs	r0, #15
 8000a5a:	f001 ff5b 	bl	8002914 <DEC2BCD>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <ds3231_init+0x80>)
 8000a64:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 8000a66:	2009      	movs	r0, #9
 8000a68:	f001 ff54 	bl	8002914 <DEC2BCD>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <ds3231_init+0x80>)
 8000a72:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 8000a74:	2017      	movs	r0, #23
 8000a76:	f001 ff4d 	bl	8002914 <DEC2BCD>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <ds3231_init+0x80>)
 8000a80:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 8000a82:	2332      	movs	r3, #50	; 0x32
 8000a84:	2203      	movs	r2, #3
 8000a86:	21d0      	movs	r1, #208	; 0xd0
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <ds3231_init+0x84>)
 8000a8a:	f002 ffe5 	bl	8003a58 <HAL_I2C_IsDeviceReady>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d000      	beq.n	8000a96 <ds3231_init+0x7a>
		while(1);
 8000a94:	e7fe      	b.n	8000a94 <ds3231_init+0x78>
	};
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000078 	.word	0x20000078
 8000aa0:	200000d0 	.word	0x200000d0

08000aa4 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af04      	add	r7, sp, #16
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 ff2c 	bl	8002914 <DEC2BCD>
 8000abc:	4603      	mov	r3, r0
 8000abe:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	9302      	str	r3, [sp, #8]
 8000ac8:	2301      	movs	r3, #1
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	f107 030f 	add.w	r3, r7, #15
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	21d0      	movs	r1, #208	; 0xd0
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <ds3231_Write+0x40>)
 8000ad8:	f002 fc9e 	bl	8003418 <HAL_I2C_Mem_Write>
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000d0 	.word	0x200000d0

08000ae8 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000aee:	230a      	movs	r3, #10
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2307      	movs	r3, #7
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <ds3231_ReadTime+0xa4>)
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	2200      	movs	r2, #0
 8000afe:	21d0      	movs	r1, #208	; 0xd0
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <ds3231_ReadTime+0xa8>)
 8000b02:	f002 fd83 	bl	800360c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000b06:	4b21      	ldr	r3, [pc, #132]	; (8000b8c <ds3231_ReadTime+0xa4>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 fee8 	bl	80028e0 <BCD2DEC>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <ds3231_ReadTime+0xac>)
 8000b16:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <ds3231_ReadTime+0xa4>)
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f001 fedf 	bl	80028e0 <BCD2DEC>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <ds3231_ReadTime+0xb0>)
 8000b28:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <ds3231_ReadTime+0xa4>)
 8000b2c:	789b      	ldrb	r3, [r3, #2]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fed6 	bl	80028e0 <BCD2DEC>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <ds3231_ReadTime+0xb4>)
 8000b3a:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <ds3231_ReadTime+0xa4>)
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f001 fecd 	bl	80028e0 <BCD2DEC>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <ds3231_ReadTime+0xb8>)
 8000b4c:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <ds3231_ReadTime+0xa4>)
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 fec4 	bl	80028e0 <BCD2DEC>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <ds3231_ReadTime+0xbc>)
 8000b5e:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <ds3231_ReadTime+0xa4>)
 8000b62:	795b      	ldrb	r3, [r3, #5]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 febb 	bl	80028e0 <BCD2DEC>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <ds3231_ReadTime+0xc0>)
 8000b70:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <ds3231_ReadTime+0xa4>)
 8000b74:	799b      	ldrb	r3, [r3, #6]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 feb2 	bl	80028e0 <BCD2DEC>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <ds3231_ReadTime+0xc4>)
 8000b82:	701a      	strb	r2, [r3, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000078 	.word	0x20000078
 8000b90:	200000d0 	.word	0x200000d0
 8000b94:	20000070 	.word	0x20000070
 8000b98:	20000072 	.word	0x20000072
 8000b9c:	20000075 	.word	0x20000075
 8000ba0:	20000074 	.word	0x20000074
 8000ba4:	20000073 	.word	0x20000073
 8000ba8:	20000076 	.word	0x20000076
 8000bac:	20000071 	.word	0x20000071

08000bb0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08e      	sub	sp, #56	; 0x38
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
 8000bd8:	615a      	str	r2, [r3, #20]
 8000bda:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000bde:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000be2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000be6:	4a2e      	ldr	r2, [pc, #184]	; (8000ca0 <MX_FSMC_Init+0xf0>)
 8000be8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000bea:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000bf6:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000bfc:	4b27      	ldr	r3, [pc, #156]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000bfe:	2210      	movs	r2, #16
 8000c00:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c20:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000c42:	230f      	movs	r3, #15
 8000c44:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000c46:	230f      	movs	r3, #15
 8000c48:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000c4a:	233c      	movs	r3, #60	; 0x3c
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000c52:	2310      	movs	r3, #16
 8000c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000c56:	2311      	movs	r3, #17
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000c62:	230f      	movs	r3, #15
 8000c64:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000c66:	2309      	movs	r3, #9
 8000c68:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000c72:	2311      	movs	r3, #17
 8000c74:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000c7a:	463a      	mov	r2, r7
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <MX_FSMC_Init+0xec>)
 8000c84:	f004 fc52 	bl	800552c <HAL_SRAM_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000c8e:	f001 f825 	bl	8001cdc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c92:	bf00      	nop
 8000c94:	3738      	adds	r7, #56	; 0x38
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000080 	.word	0x20000080
 8000ca0:	a0000104 	.word	0xa0000104

08000ca4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_FSMC_MspInit+0x88>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d131      	bne.n	8000d24 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <HAL_FSMC_MspInit+0x88>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_FSMC_MspInit+0x8c>)
 8000ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <HAL_FSMC_MspInit+0x8c>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6393      	str	r3, [r2, #56]	; 0x38
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <HAL_FSMC_MspInit+0x8c>)
 8000cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000ce2:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000ce6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <HAL_FSMC_MspInit+0x90>)
 8000cfe:	f002 f891 	bl	8002e24 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d02:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000d06:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000d14:	230c      	movs	r3, #12
 8000d16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4806      	ldr	r0, [pc, #24]	; (8000d38 <HAL_FSMC_MspInit+0x94>)
 8000d1e:	f002 f881 	bl	8002e24 <HAL_GPIO_Init>
 8000d22:	e000      	b.n	8000d26 <HAL_FSMC_MspInit+0x82>
    return;
 8000d24:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000048 	.word	0x20000048
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000d44:	f7ff ffae 	bl	8000ca4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <updateAlarm>:
uint8_t mode=AUTO_M;

uint8_t flag_inc_press=0;
uint8_t flag_hold_press=0;

void updateAlarm(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR , alarmvals[6]);
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <updateAlarm+0x5c>)
 8000d56:	799b      	ldrb	r3, [r3, #6]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2006      	movs	r0, #6
 8000d5c:	f7ff fea2 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH , alarmvals[5]);
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <updateAlarm+0x5c>)
 8000d62:	795b      	ldrb	r3, [r3, #5]
 8000d64:	4619      	mov	r1, r3
 8000d66:	2005      	movs	r0, #5
 8000d68:	f7ff fe9c 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE , alarmvals[4]);
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <updateAlarm+0x5c>)
 8000d6e:	791b      	ldrb	r3, [r3, #4]
 8000d70:	4619      	mov	r1, r3
 8000d72:	2004      	movs	r0, #4
 8000d74:	f7ff fe96 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY , alarmvals[3]);
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <updateAlarm+0x5c>)
 8000d7a:	78db      	ldrb	r3, [r3, #3]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	2003      	movs	r0, #3
 8000d80:	f7ff fe90 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR , alarmvals[2]);
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <updateAlarm+0x5c>)
 8000d86:	789b      	ldrb	r3, [r3, #2]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff fe8a 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN , alarmvals[1]);
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <updateAlarm+0x5c>)
 8000d92:	785b      	ldrb	r3, [r3, #1]
 8000d94:	4619      	mov	r1, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff fe84 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC , alarmvals[0]);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <updateAlarm+0x5c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fe7e 	bl	8000aa4 <ds3231_Write>
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000000c 	.word	0x2000000c

08000db0 <updateTime>:

void updateTime(){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR , clockvals[6]);
 8000db4:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <updateTime+0x5c>)
 8000db6:	799b      	ldrb	r3, [r3, #6]
 8000db8:	4619      	mov	r1, r3
 8000dba:	2006      	movs	r0, #6
 8000dbc:	f7ff fe72 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH , clockvals[5]);
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <updateTime+0x5c>)
 8000dc2:	795b      	ldrb	r3, [r3, #5]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	f7ff fe6c 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE , clockvals[4]);
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <updateTime+0x5c>)
 8000dce:	791b      	ldrb	r3, [r3, #4]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2004      	movs	r0, #4
 8000dd4:	f7ff fe66 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY , clockvals[3]);
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <updateTime+0x5c>)
 8000dda:	78db      	ldrb	r3, [r3, #3]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	2003      	movs	r0, #3
 8000de0:	f7ff fe60 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR , clockvals[2]);
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <updateTime+0x5c>)
 8000de6:	789b      	ldrb	r3, [r3, #2]
 8000de8:	4619      	mov	r1, r3
 8000dea:	2002      	movs	r0, #2
 8000dec:	f7ff fe5a 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN , clockvals[1]);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <updateTime+0x5c>)
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	4619      	mov	r1, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fe54 	bl	8000aa4 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC , clockvals[0]);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <updateTime+0x5c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fe4e 	bl	8000aa4 <ds3231_Write>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000004 	.word	0x20000004

08000e10 <displayTime>:
void displayTime(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af04      	add	r7, sp, #16
	lcd_ShowIntNum (70 ,100 , ds3231_hours ,2, GREEN ,BLACK ,24) ;
 8000e16:	4b36      	ldr	r3, [pc, #216]	; (8000ef0 <displayTime+0xe0>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	2318      	movs	r3, #24
 8000e1e:	9302      	str	r3, [sp, #8]
 8000e20:	2300      	movs	r3, #0
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	2164      	movs	r1, #100	; 0x64
 8000e2e:	2046      	movs	r0, #70	; 0x46
 8000e30:	f000 fb96 	bl	8001560 <lcd_ShowIntNum>
	lcd_ShowIntNum (110 ,100 , ds3231_min ,2, GREEN ,BLACK ,24) ;
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <displayTime+0xe4>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	2318      	movs	r3, #24
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2302      	movs	r3, #2
 8000e4a:	2164      	movs	r1, #100	; 0x64
 8000e4c:	206e      	movs	r0, #110	; 0x6e
 8000e4e:	f000 fb87 	bl	8001560 <lcd_ShowIntNum>
	lcd_ShowIntNum (150 ,100 , ds3231_sec ,2, GREEN ,BLACK ,24) ;
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <displayTime+0xe8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	2318      	movs	r3, #24
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2302      	movs	r3, #2
 8000e68:	2164      	movs	r1, #100	; 0x64
 8000e6a:	2096      	movs	r0, #150	; 0x96
 8000e6c:	f000 fb78 	bl	8001560 <lcd_ShowIntNum>
	lcd_ShowIntNum (20 ,130 , ds3231_day ,2, YELLOW ,BLACK ,24) ;
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <displayTime+0xec>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	2318      	movs	r3, #24
 8000e78:	9302      	str	r3, [sp, #8]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2302      	movs	r3, #2
 8000e86:	2182      	movs	r1, #130	; 0x82
 8000e88:	2014      	movs	r0, #20
 8000e8a:	f000 fb69 	bl	8001560 <lcd_ShowIntNum>
	lcd_ShowIntNum (70 ,130 , ds3231_date ,2, YELLOW ,BLACK ,24) ;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <displayTime+0xf0>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	2318      	movs	r3, #24
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	2182      	movs	r1, #130	; 0x82
 8000ea6:	2046      	movs	r0, #70	; 0x46
 8000ea8:	f000 fb5a 	bl	8001560 <lcd_ShowIntNum>
	lcd_ShowIntNum (110 ,130 , ds3231_month ,2, YELLOW ,BLACK ,24) ;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <displayTime+0xf4>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	2318      	movs	r3, #24
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	2182      	movs	r1, #130	; 0x82
 8000ec4:	206e      	movs	r0, #110	; 0x6e
 8000ec6:	f000 fb4b 	bl	8001560 <lcd_ShowIntNum>
	lcd_ShowIntNum (150 ,130 , ds3231_year ,2, YELLOW ,BLACK ,24) ;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <displayTime+0xf8>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	2318      	movs	r3, #24
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2302      	movs	r3, #2
 8000ee0:	2182      	movs	r1, #130	; 0x82
 8000ee2:	2096      	movs	r0, #150	; 0x96
 8000ee4:	f000 fb3c 	bl	8001560 <lcd_ShowIntNum>
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000075 	.word	0x20000075
 8000ef4:	20000072 	.word	0x20000072
 8000ef8:	20000070 	.word	0x20000070
 8000efc:	20000074 	.word	0x20000074
 8000f00:	20000073 	.word	0x20000073
 8000f04:	20000076 	.word	0x20000076
 8000f08:	20000071 	.word	0x20000071

08000f0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	4b6f      	ldr	r3, [pc, #444]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a6e      	ldr	r2, [pc, #440]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f2c:	f043 0310 	orr.w	r3, r3, #16
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b6c      	ldr	r3, [pc, #432]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0310 	and.w	r3, r3, #16
 8000f3a:	61bb      	str	r3, [r7, #24]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a67      	ldr	r2, [pc, #412]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b65      	ldr	r3, [pc, #404]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b61      	ldr	r3, [pc, #388]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a60      	ldr	r2, [pc, #384]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b5e      	ldr	r3, [pc, #376]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b5a      	ldr	r3, [pc, #360]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a59      	ldr	r2, [pc, #356]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b57      	ldr	r3, [pc, #348]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a52      	ldr	r2, [pc, #328]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b49      	ldr	r3, [pc, #292]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b45      	ldr	r3, [pc, #276]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a44      	ldr	r2, [pc, #272]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b42      	ldr	r3, [pc, #264]	; (80010e4 <MX_GPIO_Init+0x1d8>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2170      	movs	r1, #112	; 0x70
 8000fea:	483f      	ldr	r0, [pc, #252]	; (80010e8 <MX_GPIO_Init+0x1dc>)
 8000fec:	f002 f8b6 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff6:	483d      	ldr	r0, [pc, #244]	; (80010ec <MX_GPIO_Init+0x1e0>)
 8000ff8:	f002 f8b0 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	483b      	ldr	r0, [pc, #236]	; (80010f0 <MX_GPIO_Init+0x1e4>)
 8001002:	f002 f8ab 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100c:	4839      	ldr	r0, [pc, #228]	; (80010f4 <MX_GPIO_Init+0x1e8>)
 800100e:	f002 f8a5 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2108      	movs	r1, #8
 8001016:	4838      	ldr	r0, [pc, #224]	; (80010f8 <MX_GPIO_Init+0x1ec>)
 8001018:	f002 f8a0 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800101c:	2370      	movs	r3, #112	; 0x70
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	482d      	ldr	r0, [pc, #180]	; (80010e8 <MX_GPIO_Init+0x1dc>)
 8001034:	f001 fef6 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4826      	ldr	r0, [pc, #152]	; (80010ec <MX_GPIO_Init+0x1e0>)
 8001052:	f001 fee7 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001056:	23c0      	movs	r3, #192	; 0xc0
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	4822      	ldr	r0, [pc, #136]	; (80010f4 <MX_GPIO_Init+0x1e8>)
 800106a:	f001 fedb 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800106e:	2330      	movs	r3, #48	; 0x30
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	481a      	ldr	r0, [pc, #104]	; (80010ec <MX_GPIO_Init+0x1e0>)
 8001082:	f001 fecf 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001086:	2340      	movs	r3, #64	; 0x40
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <MX_GPIO_Init+0x1e4>)
 800109e:	f001 fec1 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80010a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <MX_GPIO_Init+0x1e8>)
 80010bc:	f001 feb2 	bl	8002e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80010c0:	2308      	movs	r3, #8
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 031c 	add.w	r3, r7, #28
 80010d4:	4619      	mov	r1, r3
 80010d6:	4808      	ldr	r0, [pc, #32]	; (80010f8 <MX_GPIO_Init+0x1ec>)
 80010d8:	f001 fea4 	bl	8002e24 <HAL_GPIO_Init>

}
 80010dc:	bf00      	nop
 80010de:	3730      	adds	r7, #48	; 0x30
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40021800 	.word	0x40021800
 80010f4:	40020000 	.word	0x40020000
 80010f8:	40020c00 	.word	0x40020c00

080010fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <MX_I2C1_Init+0x50>)
 8001102:	4a13      	ldr	r2, [pc, #76]	; (8001150 <MX_I2C1_Init+0x54>)
 8001104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <MX_I2C1_Init+0x50>)
 8001108:	4a12      	ldr	r2, [pc, #72]	; (8001154 <MX_I2C1_Init+0x58>)
 800110a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_I2C1_Init+0x50>)
 800111a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <MX_I2C1_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_I2C1_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MX_I2C1_Init+0x50>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_I2C1_Init+0x50>)
 8001134:	2200      	movs	r2, #0
 8001136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_I2C1_Init+0x50>)
 800113a:	f002 f829 	bl	8003190 <HAL_I2C_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 fdca 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200000d0 	.word	0x200000d0
 8001150:	40005400 	.word	0x40005400
 8001154:	000186a0 	.word	0x000186a0

08001158 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a19      	ldr	r2, [pc, #100]	; (80011dc <HAL_I2C_MspInit+0x84>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d12b      	bne.n	80011d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 8001184:	f043 0302 	orr.w	r3, r3, #2
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001196:	23c0      	movs	r3, #192	; 0xc0
 8001198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119a:	2312      	movs	r3, #18
 800119c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011a6:	2304      	movs	r3, #4
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4619      	mov	r1, r3
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <HAL_I2C_MspInit+0x8c>)
 80011b2:	f001 fe37 	bl	8002e24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 80011c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_I2C_MspInit+0x88>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011d2:	bf00      	nop
 80011d4:	3728      	adds	r7, #40	; 0x28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40005400 	.word	0x40005400
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020400 	.word	0x40020400

080011e8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <LCD_WR_REG+0x1c>)
 80011f4:	88fb      	ldrh	r3, [r7, #6]
 80011f6:	8013      	strh	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	600ffffe 	.word	0x600ffffe

08001208 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001212:	4a04      	ldr	r2, [pc, #16]	; (8001224 <LCD_WR_DATA+0x1c>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	8053      	strh	r3, [r2, #2]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	600ffffe 	.word	0x600ffffe

08001228 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <LCD_RD_DATA+0x20>)
 8001230:	885b      	ldrh	r3, [r3, #2]
 8001232:	b29b      	uxth	r3, r3
 8001234:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	b29b      	uxth	r3, r3
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	600ffffe 	.word	0x600ffffe

0800124c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	80fb      	strh	r3, [r7, #6]
 800125e:	4603      	mov	r3, r0
 8001260:	80bb      	strh	r3, [r7, #4]
 8001262:	460b      	mov	r3, r1
 8001264:	807b      	strh	r3, [r7, #2]
 8001266:	4613      	mov	r3, r2
 8001268:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800126a:	202a      	movs	r0, #42	; 0x2a
 800126c:	f7ff ffbc 	bl	80011e8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	0a1b      	lsrs	r3, r3, #8
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffc6 	bl	8001208 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	b29b      	uxth	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ffc0 	bl	8001208 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	0a1b      	lsrs	r3, r3, #8
 800128c:	b29b      	uxth	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ffba 	bl	8001208 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ffb4 	bl	8001208 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80012a0:	202b      	movs	r0, #43	; 0x2b
 80012a2:	f7ff ffa1 	bl	80011e8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80012a6:	88bb      	ldrh	r3, [r7, #4]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ffab 	bl	8001208 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80012b2:	88bb      	ldrh	r3, [r7, #4]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffa5 	bl	8001208 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80012be:	883b      	ldrh	r3, [r7, #0]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff9f 	bl	8001208 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80012ca:	883b      	ldrh	r3, [r7, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff99 	bl	8001208 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80012d6:	202c      	movs	r0, #44	; 0x2c
 80012d8:	f7ff ff86 	bl	80011e8 <LCD_WR_REG>
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <lcd_Clear+0x70>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	3b01      	subs	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <lcd_Clear+0x70>)
 8001308:	885b      	ldrh	r3, [r3, #2]
 800130a:	3b01      	subs	r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	2100      	movs	r1, #0
 8001310:	2000      	movs	r0, #0
 8001312:	f7ff ff9b 	bl	800124c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001316:	2300      	movs	r3, #0
 8001318:	81fb      	strh	r3, [r7, #14]
 800131a:	e011      	b.n	8001340 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 800131c:	2300      	movs	r3, #0
 800131e:	81bb      	strh	r3, [r7, #12]
 8001320:	e006      	b.n	8001330 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff6f 	bl	8001208 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	3301      	adds	r3, #1
 800132e:	81bb      	strh	r3, [r7, #12]
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <lcd_Clear+0x70>)
 8001332:	885b      	ldrh	r3, [r3, #2]
 8001334:	89ba      	ldrh	r2, [r7, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d3f3      	bcc.n	8001322 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 800133a:	89fb      	ldrh	r3, [r7, #14]
 800133c:	3301      	adds	r3, #1
 800133e:	81fb      	strh	r3, [r7, #14]
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <lcd_Clear+0x70>)
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	89fa      	ldrh	r2, [r7, #14]
 8001346:	429a      	cmp	r2, r3
 8001348:	d3e8      	bcc.n	800131c <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 800134a:	bf00      	nop
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000124 	.word	0x20000124

08001358 <lcd_DrawPoint>:
		}
	}
}

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
 8001362:	460b      	mov	r3, r1
 8001364:	80bb      	strh	r3, [r7, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 800136a:	88bb      	ldrh	r3, [r7, #4]
 800136c:	88fa      	ldrh	r2, [r7, #6]
 800136e:	88b9      	ldrh	r1, [r7, #4]
 8001370:	88f8      	ldrh	r0, [r7, #6]
 8001372:	f7ff ff6b 	bl	800124c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff45 	bl	8001208 <LCD_WR_DATA>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	4604      	mov	r4, r0
 8001390:	4608      	mov	r0, r1
 8001392:	4611      	mov	r1, r2
 8001394:	461a      	mov	r2, r3
 8001396:	4623      	mov	r3, r4
 8001398:	80fb      	strh	r3, [r7, #6]
 800139a:	4603      	mov	r3, r0
 800139c:	80bb      	strh	r3, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
 80013a2:	4613      	mov	r3, r2
 80013a4:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80013ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bf14      	ite	ne
 80013ca:	2301      	movne	r3, #1
 80013cc:	2300      	moveq	r3, #0
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013d8:	b29b      	uxth	r3, r3
 80013da:	fb12 f303 	smulbb	r3, r2, r3
 80013de:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	3b20      	subs	r3, #32
 80013e4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	4413      	add	r3, r2
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	3b01      	subs	r3, #1
 80013f2:	b29c      	uxth	r4, r3
 80013f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	88bb      	ldrh	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	b29b      	uxth	r3, r3
 8001400:	3b01      	subs	r3, #1
 8001402:	b29b      	uxth	r3, r3
 8001404:	88b9      	ldrh	r1, [r7, #4]
 8001406:	88f8      	ldrh	r0, [r7, #6]
 8001408:	4622      	mov	r2, r4
 800140a:	f7ff ff1f 	bl	800124c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 800140e:	2300      	movs	r3, #0
 8001410:	827b      	strh	r3, [r7, #18]
 8001412:	e07a      	b.n	800150a <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001414:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001418:	2b0c      	cmp	r3, #12
 800141a:	d028      	beq.n	800146e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 800141c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001420:	2b10      	cmp	r3, #16
 8001422:	d108      	bne.n	8001436 <lcd_ShowChar+0xae>
 8001424:	78fa      	ldrb	r2, [r7, #3]
 8001426:	8a7b      	ldrh	r3, [r7, #18]
 8001428:	493c      	ldr	r1, [pc, #240]	; (800151c <lcd_ShowChar+0x194>)
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	440a      	add	r2, r1
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	75fb      	strb	r3, [r7, #23]
 8001434:	e01b      	b.n	800146e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8001436:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800143a:	2b18      	cmp	r3, #24
 800143c:	d10b      	bne.n	8001456 <lcd_ShowChar+0xce>
 800143e:	78fa      	ldrb	r2, [r7, #3]
 8001440:	8a79      	ldrh	r1, [r7, #18]
 8001442:	4837      	ldr	r0, [pc, #220]	; (8001520 <lcd_ShowChar+0x198>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	4403      	add	r3, r0
 800144e:	440b      	add	r3, r1
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	75fb      	strb	r3, [r7, #23]
 8001454:	e00b      	b.n	800146e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8001456:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800145a:	2b20      	cmp	r3, #32
 800145c:	d15a      	bne.n	8001514 <lcd_ShowChar+0x18c>
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	8a7b      	ldrh	r3, [r7, #18]
 8001462:	4930      	ldr	r1, [pc, #192]	; (8001524 <lcd_ShowChar+0x19c>)
 8001464:	0192      	lsls	r2, r2, #6
 8001466:	440a      	add	r2, r1
 8001468:	4413      	add	r3, r2
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 800146e:	2300      	movs	r3, #0
 8001470:	75bb      	strb	r3, [r7, #22]
 8001472:	e044      	b.n	80014fe <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001474:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001478:	2b00      	cmp	r3, #0
 800147a:	d120      	bne.n	80014be <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 800147c:	7dfa      	ldrb	r2, [r7, #23]
 800147e:	7dbb      	ldrb	r3, [r7, #22]
 8001480:	fa42 f303 	asr.w	r3, r2, r3
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <lcd_ShowChar+0x10e>
 800148c:	883b      	ldrh	r3, [r7, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff feba 	bl	8001208 <LCD_WR_DATA>
 8001494:	e003      	b.n	800149e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001496:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff feb5 	bl	8001208 <LCD_WR_DATA>
				m++;
 800149e:	7d7b      	ldrb	r3, [r7, #21]
 80014a0:	3301      	adds	r3, #1
 80014a2:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80014a4:	7d7b      	ldrb	r3, [r7, #21]
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80014ac:	fb02 f201 	mul.w	r2, r2, r1
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d11f      	bne.n	80014f8 <lcd_ShowChar+0x170>
				{
					m=0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	757b      	strb	r3, [r7, #21]
					break;
 80014bc:	e022      	b.n	8001504 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80014be:	7dfa      	ldrb	r2, [r7, #23]
 80014c0:	7dbb      	ldrb	r3, [r7, #22]
 80014c2:	fa42 f303 	asr.w	r3, r2, r3
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <lcd_ShowChar+0x152>
 80014ce:	883a      	ldrh	r2, [r7, #0]
 80014d0:	88b9      	ldrh	r1, [r7, #4]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff3f 	bl	8001358 <lcd_DrawPoint>
				x++;
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	3301      	adds	r3, #1
 80014de:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80014e0:	88fa      	ldrh	r2, [r7, #6]
 80014e2:	8a3b      	ldrh	r3, [r7, #16]
 80014e4:	1ad2      	subs	r2, r2, r3
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d105      	bne.n	80014f8 <lcd_ShowChar+0x170>
				{
					x=x0;
 80014ec:	8a3b      	ldrh	r3, [r7, #16]
 80014ee:	80fb      	strh	r3, [r7, #6]
					y++;
 80014f0:	88bb      	ldrh	r3, [r7, #4]
 80014f2:	3301      	adds	r3, #1
 80014f4:	80bb      	strh	r3, [r7, #4]
					break;
 80014f6:	e005      	b.n	8001504 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80014f8:	7dbb      	ldrb	r3, [r7, #22]
 80014fa:	3301      	adds	r3, #1
 80014fc:	75bb      	strb	r3, [r7, #22]
 80014fe:	7dbb      	ldrb	r3, [r7, #22]
 8001500:	2b07      	cmp	r3, #7
 8001502:	d9b7      	bls.n	8001474 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001504:	8a7b      	ldrh	r3, [r7, #18]
 8001506:	3301      	adds	r3, #1
 8001508:	827b      	strh	r3, [r7, #18]
 800150a:	8a7a      	ldrh	r2, [r7, #18]
 800150c:	89bb      	ldrh	r3, [r7, #12]
 800150e:	429a      	cmp	r2, r3
 8001510:	d380      	bcc.n	8001414 <lcd_ShowChar+0x8c>
 8001512:	e000      	b.n	8001516 <lcd_ShowChar+0x18e>
		else return;
 8001514:	bf00      	nop
				}
			}
		}
	}
}
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	08007058 	.word	0x08007058
 8001520:	08007648 	.word	0x08007648
 8001524:	08008818 	.word	0x08008818

08001528 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001538:	2301      	movs	r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 800153c:	e004      	b.n	8001548 <mypow+0x20>
 800153e:	79fa      	ldrb	r2, [r7, #7]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	1e5a      	subs	r2, r3, #1
 800154c:	71ba      	strb	r2, [r7, #6]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f5      	bne.n	800153e <mypow+0x16>
	return result;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b089      	sub	sp, #36	; 0x24
 8001564:	af04      	add	r7, sp, #16
 8001566:	4604      	mov	r4, r0
 8001568:	4608      	mov	r0, r1
 800156a:	4611      	mov	r1, r2
 800156c:	461a      	mov	r2, r3
 800156e:	4623      	mov	r3, r4
 8001570:	80fb      	strh	r3, [r7, #6]
 8001572:	4603      	mov	r3, r0
 8001574:	80bb      	strh	r3, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	807b      	strh	r3, [r7, #2]
 800157a:	4613      	mov	r3, r2
 800157c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 800157e:	2300      	movs	r3, #0
 8001580:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001582:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800158a:	2300      	movs	r3, #0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e059      	b.n	8001644 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001590:	887c      	ldrh	r4, [r7, #2]
 8001592:	787a      	ldrb	r2, [r7, #1]
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	4619      	mov	r1, r3
 80015a0:	200a      	movs	r0, #10
 80015a2:	f7ff ffc1 	bl	8001528 <mypow>
 80015a6:	4603      	mov	r3, r0
 80015a8:	fbb4 f1f3 	udiv	r1, r4, r3
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <lcd_ShowIntNum+0xf8>)
 80015ae:	fba3 2301 	umull	r2, r3, r3, r1
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	1aca      	subs	r2, r1, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80015c2:	7bbb      	ldrb	r3, [r7, #14]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d121      	bne.n	800160c <lcd_ShowIntNum+0xac>
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	787b      	ldrb	r3, [r7, #1]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	429a      	cmp	r2, r3
 80015d0:	da1c      	bge.n	800160c <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80015d2:	7b3b      	ldrb	r3, [r7, #12]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d117      	bne.n	8001608 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	b29a      	uxth	r2, r3
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	fb12 f303 	smulbb	r3, r2, r3
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4413      	add	r3, r2
 80015ea:	b298      	uxth	r0, r3
 80015ec:	8c3a      	ldrh	r2, [r7, #32]
 80015ee:	88b9      	ldrh	r1, [r7, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	4613      	mov	r3, r2
 8001600:	2220      	movs	r2, #32
 8001602:	f7ff fec1 	bl	8001388 <lcd_ShowChar>
				continue;
 8001606:	e01a      	b.n	800163e <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001608:	2301      	movs	r3, #1
 800160a:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	b29a      	uxth	r2, r3
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	b29b      	uxth	r3, r3
 8001614:	fb12 f303 	smulbb	r3, r2, r3
 8001618:	b29a      	uxth	r2, r3
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	4413      	add	r3, r2
 800161e:	b298      	uxth	r0, r3
 8001620:	7b3b      	ldrb	r3, [r7, #12]
 8001622:	3330      	adds	r3, #48	; 0x30
 8001624:	b2da      	uxtb	r2, r3
 8001626:	8c3c      	ldrh	r4, [r7, #32]
 8001628:	88b9      	ldrh	r1, [r7, #4]
 800162a:	2300      	movs	r3, #0
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	4623      	mov	r3, r4
 800163a:	f7ff fea5 	bl	8001388 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	3301      	adds	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	787b      	ldrb	r3, [r7, #1]
 8001648:	429a      	cmp	r2, r3
 800164a:	d3a1      	bcc.n	8001590 <lcd_ShowIntNum+0x30>
	}
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bd90      	pop	{r4, r7, pc}
 8001656:	bf00      	nop
 8001658:	cccccccd 	.word	0xcccccccd

0800165c <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <lcd_SetDir+0x44>)
 8001678:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800167c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <lcd_SetDir+0x44>)
 8001680:	22f0      	movs	r2, #240	; 0xf0
 8001682:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001684:	e006      	b.n	8001694 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <lcd_SetDir+0x44>)
 8001688:	22f0      	movs	r2, #240	; 0xf0
 800168a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <lcd_SetDir+0x44>)
 800168e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001692:	805a      	strh	r2, [r3, #2]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	20000124 	.word	0x20000124

080016a4 <lcd_init>:


void lcd_init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ae:	48aa      	ldr	r0, [pc, #680]	; (8001958 <lcd_init+0x2b4>)
 80016b0:	f001 fd54 	bl	800315c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016b8:	f001 f9ec 	bl	8002a94 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c2:	48a5      	ldr	r0, [pc, #660]	; (8001958 <lcd_init+0x2b4>)
 80016c4:	f001 fd4a 	bl	800315c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80016c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016cc:	f001 f9e2 	bl	8002a94 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff ffc3 	bl	800165c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80016d6:	20d3      	movs	r0, #211	; 0xd3
 80016d8:	f7ff fd86 	bl	80011e8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80016dc:	f7ff fda4 	bl	8001228 <LCD_RD_DATA>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b9d      	ldr	r3, [pc, #628]	; (800195c <lcd_init+0x2b8>)
 80016e6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80016e8:	f7ff fd9e 	bl	8001228 <LCD_RD_DATA>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b9a      	ldr	r3, [pc, #616]	; (800195c <lcd_init+0x2b8>)
 80016f2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80016f4:	f7ff fd98 	bl	8001228 <LCD_RD_DATA>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b97      	ldr	r3, [pc, #604]	; (800195c <lcd_init+0x2b8>)
 80016fe:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001700:	4b96      	ldr	r3, [pc, #600]	; (800195c <lcd_init+0x2b8>)
 8001702:	889b      	ldrh	r3, [r3, #4]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b94      	ldr	r3, [pc, #592]	; (800195c <lcd_init+0x2b8>)
 800170a:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 800170c:	f7ff fd8c 	bl	8001228 <LCD_RD_DATA>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b91      	ldr	r3, [pc, #580]	; (800195c <lcd_init+0x2b8>)
 8001716:	889b      	ldrh	r3, [r3, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b8f      	ldr	r3, [pc, #572]	; (800195c <lcd_init+0x2b8>)
 800171e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001720:	20cf      	movs	r0, #207	; 0xcf
 8001722:	f7ff fd61 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fd6e 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 800172c:	20c1      	movs	r0, #193	; 0xc1
 800172e:	f7ff fd6b 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001732:	2030      	movs	r0, #48	; 0x30
 8001734:	f7ff fd68 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001738:	20ed      	movs	r0, #237	; 0xed
 800173a:	f7ff fd55 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800173e:	2064      	movs	r0, #100	; 0x64
 8001740:	f7ff fd62 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001744:	2003      	movs	r0, #3
 8001746:	f7ff fd5f 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800174a:	2012      	movs	r0, #18
 800174c:	f7ff fd5c 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001750:	2081      	movs	r0, #129	; 0x81
 8001752:	f7ff fd59 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001756:	20e8      	movs	r0, #232	; 0xe8
 8001758:	f7ff fd46 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800175c:	2085      	movs	r0, #133	; 0x85
 800175e:	f7ff fd53 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001762:	2010      	movs	r0, #16
 8001764:	f7ff fd50 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001768:	207a      	movs	r0, #122	; 0x7a
 800176a:	f7ff fd4d 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800176e:	20cb      	movs	r0, #203	; 0xcb
 8001770:	f7ff fd3a 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001774:	2039      	movs	r0, #57	; 0x39
 8001776:	f7ff fd47 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800177a:	202c      	movs	r0, #44	; 0x2c
 800177c:	f7ff fd44 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff fd41 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001786:	2034      	movs	r0, #52	; 0x34
 8001788:	f7ff fd3e 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff fd3b 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001792:	20f7      	movs	r0, #247	; 0xf7
 8001794:	f7ff fd28 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001798:	2020      	movs	r0, #32
 800179a:	f7ff fd35 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800179e:	20ea      	movs	r0, #234	; 0xea
 80017a0:	f7ff fd22 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fd2f 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fd2c 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80017b0:	20c0      	movs	r0, #192	; 0xc0
 80017b2:	f7ff fd19 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80017b6:	201b      	movs	r0, #27
 80017b8:	f7ff fd26 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80017bc:	20c1      	movs	r0, #193	; 0xc1
 80017be:	f7ff fd13 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7ff fd20 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80017c8:	20c5      	movs	r0, #197	; 0xc5
 80017ca:	f7ff fd0d 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80017ce:	2030      	movs	r0, #48	; 0x30
 80017d0:	f7ff fd1a 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80017d4:	2030      	movs	r0, #48	; 0x30
 80017d6:	f7ff fd17 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80017da:	20c7      	movs	r0, #199	; 0xc7
 80017dc:	f7ff fd04 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80017e0:	20b7      	movs	r0, #183	; 0xb7
 80017e2:	f7ff fd11 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80017e6:	2036      	movs	r0, #54	; 0x36
 80017e8:	f7ff fcfe 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80017ec:	2008      	movs	r0, #8
 80017ee:	f7ff fd0b 	bl	8001208 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80017f2:	203a      	movs	r0, #58	; 0x3a
 80017f4:	f7ff fcf8 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80017f8:	2055      	movs	r0, #85	; 0x55
 80017fa:	f7ff fd05 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80017fe:	20b1      	movs	r0, #177	; 0xb1
 8001800:	f7ff fcf2 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff fcff 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 800180a:	201a      	movs	r0, #26
 800180c:	f7ff fcfc 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001810:	20b6      	movs	r0, #182	; 0xb6
 8001812:	f7ff fce9 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001816:	200a      	movs	r0, #10
 8001818:	f7ff fcf6 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 800181c:	20a2      	movs	r0, #162	; 0xa2
 800181e:	f7ff fcf3 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001822:	20f2      	movs	r0, #242	; 0xf2
 8001824:	f7ff fce0 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fced 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800182e:	2026      	movs	r0, #38	; 0x26
 8001830:	f7ff fcda 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff fce7 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800183a:	20e0      	movs	r0, #224	; 0xe0
 800183c:	f7ff fcd4 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001840:	200f      	movs	r0, #15
 8001842:	f7ff fce1 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001846:	202a      	movs	r0, #42	; 0x2a
 8001848:	f7ff fcde 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 800184c:	2028      	movs	r0, #40	; 0x28
 800184e:	f7ff fcdb 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001852:	2008      	movs	r0, #8
 8001854:	f7ff fcd8 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001858:	200e      	movs	r0, #14
 800185a:	f7ff fcd5 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800185e:	2008      	movs	r0, #8
 8001860:	f7ff fcd2 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001864:	2054      	movs	r0, #84	; 0x54
 8001866:	f7ff fccf 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800186a:	20a9      	movs	r0, #169	; 0xa9
 800186c:	f7ff fccc 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001870:	2043      	movs	r0, #67	; 0x43
 8001872:	f7ff fcc9 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001876:	200a      	movs	r0, #10
 8001878:	f7ff fcc6 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800187c:	200f      	movs	r0, #15
 800187e:	f7ff fcc3 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff fcc0 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff fcbd 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff fcba 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff fcb7 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800189a:	20e1      	movs	r0, #225	; 0xe1
 800189c:	f7ff fca4 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fcb1 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80018a6:	2015      	movs	r0, #21
 80018a8:	f7ff fcae 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80018ac:	2017      	movs	r0, #23
 80018ae:	f7ff fcab 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80018b2:	2007      	movs	r0, #7
 80018b4:	f7ff fca8 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80018b8:	2011      	movs	r0, #17
 80018ba:	f7ff fca5 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80018be:	2006      	movs	r0, #6
 80018c0:	f7ff fca2 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80018c4:	202b      	movs	r0, #43	; 0x2b
 80018c6:	f7ff fc9f 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80018ca:	2056      	movs	r0, #86	; 0x56
 80018cc:	f7ff fc9c 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80018d0:	203c      	movs	r0, #60	; 0x3c
 80018d2:	f7ff fc99 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80018d6:	2005      	movs	r0, #5
 80018d8:	f7ff fc96 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80018dc:	2010      	movs	r0, #16
 80018de:	f7ff fc93 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f7ff fc90 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80018e8:	203f      	movs	r0, #63	; 0x3f
 80018ea:	f7ff fc8d 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80018ee:	203f      	movs	r0, #63	; 0x3f
 80018f0:	f7ff fc8a 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80018f4:	200f      	movs	r0, #15
 80018f6:	f7ff fc87 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80018fa:	202b      	movs	r0, #43	; 0x2b
 80018fc:	f7ff fc74 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff fc81 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fc7e 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff fc7b 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001912:	203f      	movs	r0, #63	; 0x3f
 8001914:	f7ff fc78 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001918:	202a      	movs	r0, #42	; 0x2a
 800191a:	f7ff fc65 	bl	80011e8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff fc72 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fc6f 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fc6c 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001930:	20ef      	movs	r0, #239	; 0xef
 8001932:	f7ff fc69 	bl	8001208 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001936:	2011      	movs	r0, #17
 8001938:	f7ff fc56 	bl	80011e8 <LCD_WR_REG>
	HAL_Delay(120);
 800193c:	2078      	movs	r0, #120	; 0x78
 800193e:	f001 f8a9 	bl	8002a94 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001942:	2029      	movs	r0, #41	; 0x29
 8001944:	f7ff fc50 	bl	80011e8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001948:	2201      	movs	r2, #1
 800194a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800194e:	4804      	ldr	r0, [pc, #16]	; (8001960 <lcd_init+0x2bc>)
 8001950:	f001 fc04 	bl	800315c <HAL_GPIO_WritePin>
}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40020800 	.word	0x40020800
 800195c:	20000124 	.word	0x20000124
 8001960:	40020000 	.word	0x40020000

08001964 <_draw_circle_8>:

void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
 8001970:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	b29a      	uxth	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	b29b      	uxth	r3, r3
 800197a:	4413      	add	r3, r2
 800197c:	b298      	uxth	r0, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	b29a      	uxth	r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	b29b      	uxth	r3, r3
 800198a:	8b3a      	ldrh	r2, [r7, #24]
 800198c:	4619      	mov	r1, r3
 800198e:	f7ff fce3 	bl	8001358 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	b29a      	uxth	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	b29b      	uxth	r3, r3
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b298      	uxth	r0, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	8b3a      	ldrh	r2, [r7, #24]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f7ff fcd3 	bl	8001358 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	b298      	uxth	r0, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	8b3a      	ldrh	r2, [r7, #24]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff fcc3 	bl	8001358 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	b298      	uxth	r0, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	8b3a      	ldrh	r2, [r7, #24]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff fcb3 	bl	8001358 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	b298      	uxth	r0, r3
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	8b3a      	ldrh	r2, [r7, #24]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff fca3 	bl	8001358 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	b298      	uxth	r0, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	8b3a      	ldrh	r2, [r7, #24]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff fc93 	bl	8001358 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	b298      	uxth	r0, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	8b3a      	ldrh	r2, [r7, #24]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff fc83 	bl	8001358 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	b298      	uxth	r0, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	8b3a      	ldrh	r2, [r7, #24]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7ff fc73 	bl	8001358 <lcd_DrawPoint>
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b08a      	sub	sp, #40	; 0x28
 8001a7e:	af02      	add	r7, sp, #8
 8001a80:	60f8      	str	r0, [r7, #12]
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4613      	mov	r3, r2
 8001a88:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	f1c3 0303 	rsb	r3, r3, #3
 8001a9a:	613b      	str	r3, [r7, #16]


	if (fill)
 8001a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d04f      	beq.n	8001b42 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8001aa2:	e029      	b.n	8001af8 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00a      	b.n	8001ac0 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff ff55 	bl	8001964 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	ddf0      	ble.n	8001aaa <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da06      	bge.n	8001adc <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	009a      	lsls	r2, r3, #2
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	3306      	adds	r3, #6
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e00a      	b.n	8001af2 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	009a      	lsls	r2, r3, #2
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	330a      	adds	r3, #10
 8001aea:	613b      	str	r3, [r7, #16]
				y--;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3301      	adds	r3, #1
 8001af6:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001af8:	69fa      	ldr	r2, [r7, #28]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	ddd1      	ble.n	8001aa4 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001b00:	e023      	b.n	8001b4a <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff ff29 	bl	8001964 <_draw_circle_8>
			if (d < 0) {
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da06      	bge.n	8001b26 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	009a      	lsls	r2, r3, #2
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4413      	add	r3, r2
 8001b20:	3306      	adds	r3, #6
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	e00a      	b.n	8001b3c <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	009a      	lsls	r2, r3, #2
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4413      	add	r3, r2
 8001b32:	330a      	adds	r3, #10
 8001b34:	613b      	str	r3, [r7, #16]
				y--;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	61bb      	str	r3, [r7, #24]
			x++;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dddb      	ble.n	8001b02 <lcd_DrawCircle+0x88>
}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <led7_init+0x14>)
 8001b5e:	f001 fafd 	bl	800315c <HAL_GPIO_WritePin>
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40021800 	.word	0x40021800

08001b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b70:	f000 ff1e 	bl	80029b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b74:	f000 f818 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b78:	f7ff f9c8 	bl	8000f0c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b7c:	f000 fd98 	bl	80026b0 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001b80:	f000 fca0 	bl	80024c4 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001b84:	f7ff f814 	bl	8000bb0 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001b88:	f000 fe30 	bl	80027ec <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001b8c:	f7ff fab6 	bl	80010fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001b90:	f000 f874 	bl	8001c7c <system_init>
  lcd_Clear(BLACK);
 8001b94:	2000      	movs	r0, #0
 8001b96:	f7ff fba5 	bl	80012e4 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  rtc_auto_fsm();
 8001b9a:	f000 fad5 	bl	8002148 <rtc_auto_fsm>
	  rtc_manual_fsm();
 8001b9e:	f000 f8a3 	bl	8001ce8 <rtc_manual_fsm>
	  alarm_fsm();
 8001ba2:	f7fe fc8d 	bl	80004c0 <alarm_fsm>
	  rtc_auto_fsm();
 8001ba6:	e7f8      	b.n	8001b9a <main+0x2e>

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 0320 	add.w	r3, r7, #32
 8001bb2:	2230      	movs	r2, #48	; 0x30
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 fa3a 	bl	8007030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <SystemClock_Config+0xcc>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a27      	ldr	r2, [pc, #156]	; (8001c74 <SystemClock_Config+0xcc>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <SystemClock_Config+0xcc>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <SystemClock_Config+0xd0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c04:	2302      	movs	r3, #2
 8001c06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c10:	2302      	movs	r3, #2
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c14:	2300      	movs	r3, #0
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c18:	2308      	movs	r3, #8
 8001c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c1c:	23a8      	movs	r3, #168	; 0xa8
 8001c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c24:	2304      	movs	r3, #4
 8001c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c28:	f107 0320 	add.w	r3, r7, #32
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fb9d 	bl	800436c <HAL_RCC_OscConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c38:	f000 f850 	bl	8001cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c40:	2302      	movs	r3, #2
 8001c42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001c4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2105      	movs	r1, #5
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f002 fdfe 	bl	800485c <HAL_RCC_ClockConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c66:	f000 f839 	bl	8001cdc <Error_Handler>
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3750      	adds	r7, #80	; 0x50
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40007000 	.word	0x40007000

08001c7c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2120      	movs	r1, #32
 8001c84:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <system_init+0x5c>)
 8001c86:	f001 fa69 	bl	800315c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2140      	movs	r1, #64	; 0x40
 8001c8e:	4812      	ldr	r0, [pc, #72]	; (8001cd8 <system_init+0x5c>)
 8001c90:	f001 fa64 	bl	800315c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2110      	movs	r1, #16
 8001c98:	480f      	ldr	r0, [pc, #60]	; (8001cd8 <system_init+0x5c>)
 8001c9a:	f001 fa5f 	bl	800315c <HAL_GPIO_WritePin>
	  timer_init();
 8001c9e:	f000 fb0f 	bl	80022c0 <timer_init>
	  led7_init();
 8001ca2:	f7ff ff57 	bl	8001b54 <led7_init>
	  button_init();
 8001ca6:	f7fe fe41 	bl	800092c <button_init>
	  lcd_init();
 8001caa:	f7ff fcfb 	bl	80016a4 <lcd_init>
	  uart_init_rs232();
 8001cae:	f000 fd71 	bl	8002794 <uart_init_rs232>
	  ds3231_init();
 8001cb2:	f7fe feb3 	bl	8000a1c <ds3231_init>
	  setAutoTimer(100);
 8001cb6:	2064      	movs	r0, #100	; 0x64
 8001cb8:	f000 fb0c 	bl	80022d4 <setAutoTimer>
	  setClockTimer(50);
 8001cbc:	2032      	movs	r0, #50	; 0x32
 8001cbe:	f000 fb41 	bl	8002344 <setClockTimer>
	  setblinkCLKnumTimer(50);
 8001cc2:	2032      	movs	r0, #50	; 0x32
 8001cc4:	f000 fb5a 	bl	800237c <setblinkCLKnumTimer>
	  setAutoIncTimer(50);
 8001cc8:	2032      	movs	r0, #50	; 0x32
 8001cca:	f000 fb73 	bl	80023b4 <setAutoIncTimer>
	  setHoldButtonTimer(100);
 8001cce:	2064      	movs	r0, #100	; 0x64
 8001cd0:	f000 fb8c 	bl	80023ec <setHoldButtonTimer>
}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <Error_Handler+0x8>
	...

08001ce8 <rtc_manual_fsm>:
#define ON	0
#define OFF	1

uint8_t ledstate=OFF;

void rtc_manual_fsm(){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af04      	add	r7, sp, #16
	switch(manclkstate){
 8001cee:	4b90      	ldr	r3, [pc, #576]	; (8001f30 <rtc_manual_fsm+0x248>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	f200 8119 	bhi.w	8001f2a <rtc_manual_fsm+0x242>
 8001cf8:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <rtc_manual_fsm+0x18>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d3f 	.word	0x08001d3f
 8001d04:	08001d85 	.word	0x08001d85
 8001d08:	08001dcb 	.word	0x08001dcb
 8001d0c:	08001e11 	.word	0x08001e11
 8001d10:	08001e57 	.word	0x08001e57
 8001d14:	08001e9d 	.word	0x08001e9d
 8001d18:	08001ee3 	.word	0x08001ee3
 8001d1c:	08001d25 	.word	0x08001d25
 8001d20:	08001d2d 	.word	0x08001d2d
	case INIT:
		manclkstate=SEC;
 8001d24:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <rtc_manual_fsm+0x248>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
		break;
 8001d2a:	e0fe      	b.n	8001f2a <rtc_manual_fsm+0x242>
	case HOLD:
		if(mode==MANUAL_M) manclkstate=INIT;
 8001d2c:	4b81      	ldr	r3, [pc, #516]	; (8001f34 <rtc_manual_fsm+0x24c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f040 80f9 	bne.w	8001f28 <rtc_manual_fsm+0x240>
 8001d36:	4b7e      	ldr	r3, [pc, #504]	; (8001f30 <rtc_manual_fsm+0x248>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	701a      	strb	r2, [r3, #0]
		break;
 8001d3c:	e0f4      	b.n	8001f28 <rtc_manual_fsm+0x240>
	case SEC:
		manButtonHandler(SEC, MIN);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	2000      	movs	r0, #0
 8001d42:	f000 f8fb 	bl	8001f3c <manButtonHandler>
		lcd_ShowIntNum (150 ,130 , clockvals[YEAR] ,2, YELLOW ,BLACK ,24);
 8001d46:	4b7c      	ldr	r3, [pc, #496]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001d48:	799b      	ldrb	r3, [r3, #6]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2318      	movs	r3, #24
 8001d4e:	9302      	str	r3, [sp, #8]
 8001d50:	2300      	movs	r3, #0
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	2182      	movs	r1, #130	; 0x82
 8001d5e:	2096      	movs	r0, #150	; 0x96
 8001d60:	f7ff fbfe 	bl	8001560 <lcd_ShowIntNum>
		manBlinkCLKHandler(150 ,100 , clockvals[SEC] ,2, GREEN ,BLACK ,24);
 8001d64:	4b74      	ldr	r3, [pc, #464]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	2318      	movs	r3, #24
 8001d6c:	9302      	str	r3, [sp, #8]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2302      	movs	r3, #2
 8001d7a:	2164      	movs	r1, #100	; 0x64
 8001d7c:	2096      	movs	r0, #150	; 0x96
 8001d7e:	f000 f92d 	bl	8001fdc <manBlinkCLKHandler>
		break;
 8001d82:	e0d2      	b.n	8001f2a <rtc_manual_fsm+0x242>
	case MIN:
		manButtonHandler(MIN, HOUR);
 8001d84:	2102      	movs	r1, #2
 8001d86:	2001      	movs	r0, #1
 8001d88:	f000 f8d8 	bl	8001f3c <manButtonHandler>
		lcd_ShowIntNum (150 ,100 , clockvals[SEC] ,2, GREEN ,BLACK ,24);
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	2318      	movs	r3, #24
 8001d94:	9302      	str	r3, [sp, #8]
 8001d96:	2300      	movs	r3, #0
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	2302      	movs	r3, #2
 8001da2:	2164      	movs	r1, #100	; 0x64
 8001da4:	2096      	movs	r0, #150	; 0x96
 8001da6:	f7ff fbdb 	bl	8001560 <lcd_ShowIntNum>
		manBlinkCLKHandler(110 ,100 , clockvals[MIN] ,2, GREEN ,BLACK ,24);
 8001daa:	4b63      	ldr	r3, [pc, #396]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001dac:	785b      	ldrb	r3, [r3, #1]
 8001dae:	461a      	mov	r2, r3
 8001db0:	2318      	movs	r3, #24
 8001db2:	9302      	str	r3, [sp, #8]
 8001db4:	2300      	movs	r3, #0
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	2164      	movs	r1, #100	; 0x64
 8001dc2:	206e      	movs	r0, #110	; 0x6e
 8001dc4:	f000 f90a 	bl	8001fdc <manBlinkCLKHandler>
		break;
 8001dc8:	e0af      	b.n	8001f2a <rtc_manual_fsm+0x242>
	case HOUR:
		manButtonHandler(HOUR, DAY);
 8001dca:	2103      	movs	r1, #3
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f000 f8b5 	bl	8001f3c <manButtonHandler>
		lcd_ShowIntNum (110 ,100 , clockvals[MIN] ,2, GREEN ,BLACK ,24);
 8001dd2:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001dd4:	785b      	ldrb	r3, [r3, #1]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	2318      	movs	r3, #24
 8001dda:	9302      	str	r3, [sp, #8]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2302      	movs	r3, #2
 8001de8:	2164      	movs	r1, #100	; 0x64
 8001dea:	206e      	movs	r0, #110	; 0x6e
 8001dec:	f7ff fbb8 	bl	8001560 <lcd_ShowIntNum>
		manBlinkCLKHandler(70 ,100 ,clockvals[HOUR] ,2, GREEN ,BLACK ,24) ;
 8001df0:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001df2:	789b      	ldrb	r3, [r3, #2]
 8001df4:	461a      	mov	r2, r3
 8001df6:	2318      	movs	r3, #24
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2302      	movs	r3, #2
 8001e06:	2164      	movs	r1, #100	; 0x64
 8001e08:	2046      	movs	r0, #70	; 0x46
 8001e0a:	f000 f8e7 	bl	8001fdc <manBlinkCLKHandler>
		break;
 8001e0e:	e08c      	b.n	8001f2a <rtc_manual_fsm+0x242>
	case DAY:
		manButtonHandler(DAY, DATE);
 8001e10:	2104      	movs	r1, #4
 8001e12:	2003      	movs	r0, #3
 8001e14:	f000 f892 	bl	8001f3c <manButtonHandler>
		lcd_ShowIntNum (70 ,100 , clockvals[HOUR] ,2, GREEN ,BLACK ,24);
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001e1a:	789b      	ldrb	r3, [r3, #2]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	2318      	movs	r3, #24
 8001e20:	9302      	str	r3, [sp, #8]
 8001e22:	2300      	movs	r3, #0
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	2164      	movs	r1, #100	; 0x64
 8001e30:	2046      	movs	r0, #70	; 0x46
 8001e32:	f7ff fb95 	bl	8001560 <lcd_ShowIntNum>
		manBlinkCLKHandler(20 ,130 , clockvals[DAY] ,2, YELLOW ,BLACK ,24) ;
 8001e36:	4b40      	ldr	r3, [pc, #256]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001e38:	78db      	ldrb	r3, [r3, #3]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2318      	movs	r3, #24
 8001e3e:	9302      	str	r3, [sp, #8]
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	2182      	movs	r1, #130	; 0x82
 8001e4e:	2014      	movs	r0, #20
 8001e50:	f000 f8c4 	bl	8001fdc <manBlinkCLKHandler>
		break;
 8001e54:	e069      	b.n	8001f2a <rtc_manual_fsm+0x242>
	case DATE:
		manButtonHandler(DATE, MONTH);
 8001e56:	2105      	movs	r1, #5
 8001e58:	2004      	movs	r0, #4
 8001e5a:	f000 f86f 	bl	8001f3c <manButtonHandler>
		lcd_ShowIntNum (20 ,130 , clockvals[DAY] ,2, YELLOW ,BLACK ,24);
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001e60:	78db      	ldrb	r3, [r3, #3]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	2318      	movs	r3, #24
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2302      	movs	r3, #2
 8001e74:	2182      	movs	r1, #130	; 0x82
 8001e76:	2014      	movs	r0, #20
 8001e78:	f7ff fb72 	bl	8001560 <lcd_ShowIntNum>
		manBlinkCLKHandler(70 ,130 , clockvals[DATE] ,2, YELLOW ,BLACK ,24) ;
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001e7e:	791b      	ldrb	r3, [r3, #4]
 8001e80:	461a      	mov	r2, r3
 8001e82:	2318      	movs	r3, #24
 8001e84:	9302      	str	r3, [sp, #8]
 8001e86:	2300      	movs	r3, #0
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2302      	movs	r3, #2
 8001e92:	2182      	movs	r1, #130	; 0x82
 8001e94:	2046      	movs	r0, #70	; 0x46
 8001e96:	f000 f8a1 	bl	8001fdc <manBlinkCLKHandler>
		break;
 8001e9a:	e046      	b.n	8001f2a <rtc_manual_fsm+0x242>
	case MONTH:
		manButtonHandler(MONTH, YEAR);
 8001e9c:	2106      	movs	r1, #6
 8001e9e:	2005      	movs	r0, #5
 8001ea0:	f000 f84c 	bl	8001f3c <manButtonHandler>
		lcd_ShowIntNum (70 ,130 , clockvals[DATE] ,2, YELLOW ,BLACK ,24);
 8001ea4:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001ea6:	791b      	ldrb	r3, [r3, #4]
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	2318      	movs	r3, #24
 8001eac:	9302      	str	r3, [sp, #8]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	2302      	movs	r3, #2
 8001eba:	2182      	movs	r1, #130	; 0x82
 8001ebc:	2046      	movs	r0, #70	; 0x46
 8001ebe:	f7ff fb4f 	bl	8001560 <lcd_ShowIntNum>
		manBlinkCLKHandler(110 ,130 , clockvals[MONTH] ,2, YELLOW ,BLACK ,24) ;
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001ec4:	795b      	ldrb	r3, [r3, #5]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2318      	movs	r3, #24
 8001eca:	9302      	str	r3, [sp, #8]
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	2182      	movs	r1, #130	; 0x82
 8001eda:	206e      	movs	r0, #110	; 0x6e
 8001edc:	f000 f87e 	bl	8001fdc <manBlinkCLKHandler>
		break;
 8001ee0:	e023      	b.n	8001f2a <rtc_manual_fsm+0x242>
	case YEAR:
		manButtonHandler(YEAR, SEC);
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2006      	movs	r0, #6
 8001ee6:	f000 f829 	bl	8001f3c <manButtonHandler>
		lcd_ShowIntNum (110 ,130 , clockvals[MONTH] ,2, YELLOW ,BLACK ,24);
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001eec:	795b      	ldrb	r3, [r3, #5]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2318      	movs	r3, #24
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2302      	movs	r3, #2
 8001f00:	2182      	movs	r1, #130	; 0x82
 8001f02:	206e      	movs	r0, #110	; 0x6e
 8001f04:	f7ff fb2c 	bl	8001560 <lcd_ShowIntNum>
		manBlinkCLKHandler(150 ,130 , clockvals[YEAR] ,2, YELLOW ,BLACK ,24) ;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <rtc_manual_fsm+0x250>)
 8001f0a:	799b      	ldrb	r3, [r3, #6]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2318      	movs	r3, #24
 8001f10:	9302      	str	r3, [sp, #8]
 8001f12:	2300      	movs	r3, #0
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	2182      	movs	r1, #130	; 0x82
 8001f20:	2096      	movs	r0, #150	; 0x96
 8001f22:	f000 f85b 	bl	8001fdc <manBlinkCLKHandler>
		break;
 8001f26:	e000      	b.n	8001f2a <rtc_manual_fsm+0x242>
		break;
 8001f28:	bf00      	nop
	}
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000013 	.word	0x20000013
 8001f34:	2000004c 	.word	0x2000004c
 8001f38:	20000004 	.word	0x20000004

08001f3c <manButtonHandler>:

void manButtonHandler(enum MANUALCLOCKSTATE curState,enum MANUALCLOCKSTATE nextState){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	460a      	mov	r2, r1
 8001f46:	71fb      	strb	r3, [r7, #7]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	71bb      	strb	r3, [r7, #6]
	if(FLAG_BUT_CD==1){
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <manButtonHandler+0x88>)
 8001f4e:	885b      	ldrh	r3, [r3, #2]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d133      	bne.n	8001fbc <manButtonHandler+0x80>
		if(button_count[0]==1){
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <manButtonHandler+0x8c>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d106      	bne.n	8001f6a <manButtonHandler+0x2e>
			mode=ALARM_M;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <manButtonHandler+0x90>)
 8001f5e:	2202      	movs	r2, #2
 8001f60:	701a      	strb	r2, [r3, #0]
			manclkstate=HOLD;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <manButtonHandler+0x94>)
 8001f64:	2208      	movs	r2, #8
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e025      	b.n	8001fb6 <manButtonHandler+0x7a>
		}
		else if(button_count[12]==1){
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <manButtonHandler+0x8c>)
 8001f6c:	8b1b      	ldrh	r3, [r3, #24]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d103      	bne.n	8001f7a <manButtonHandler+0x3e>
			manclkstate=nextState;
 8001f72:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <manButtonHandler+0x94>)
 8001f74:	79bb      	ldrb	r3, [r7, #6]
 8001f76:	7013      	strb	r3, [r2, #0]
 8001f78:	e01d      	b.n	8001fb6 <manButtonHandler+0x7a>
		}
		else if(button_count[3]==1){
 8001f7a:	4b13      	ldr	r3, [pc, #76]	; (8001fc8 <manButtonHandler+0x8c>)
 8001f7c:	88db      	ldrh	r3, [r3, #6]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d103      	bne.n	8001f8a <manButtonHandler+0x4e>
			flag_inc_press=1;
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <manButtonHandler+0x98>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e015      	b.n	8001fb6 <manButtonHandler+0x7a>
		}
		else if(button_count[3]==0 && flag_inc_press==1){
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <manButtonHandler+0x8c>)
 8001f8c:	88db      	ldrh	r3, [r3, #6]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d111      	bne.n	8001fb6 <manButtonHandler+0x7a>
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <manButtonHandler+0x98>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d10d      	bne.n	8001fb6 <manButtonHandler+0x7a>
			flag_inc_press=0;
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <manButtonHandler+0x98>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
			clockvals[curState]++;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <manButtonHandler+0x9c>)
 8001fa4:	5cd2      	ldrb	r2, [r2, r3]
 8001fa6:	3201      	adds	r2, #1
 8001fa8:	b2d1      	uxtb	r1, r2
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <manButtonHandler+0x9c>)
 8001fac:	54d1      	strb	r1, [r2, r3]
			manTimeDurationHandler();
 8001fae:	f000 f869 	bl	8002084 <manTimeDurationHandler>
			updateTime();
 8001fb2:	f7fe fefd 	bl	8000db0 <updateTime>
		}
		setbutCooldownTimer(50);
 8001fb6:	2032      	movs	r0, #50	; 0x32
 8001fb8:	f000 f9a8 	bl	800230c <setbutCooldownTimer>
	}
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000160 	.word	0x20000160
 8001fc8:	20000050 	.word	0x20000050
 8001fcc:	2000004c 	.word	0x2000004c
 8001fd0:	20000013 	.word	0x20000013
 8001fd4:	2000004d 	.word	0x2000004d
 8001fd8:	20000004 	.word	0x20000004

08001fdc <manBlinkCLKHandler>:

void manBlinkCLKHandler(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey){
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b087      	sub	sp, #28
 8001fe0:	af04      	add	r7, sp, #16
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	4608      	mov	r0, r1
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4623      	mov	r3, r4
 8001fec:	80fb      	strh	r3, [r7, #6]
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80bb      	strh	r3, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	807b      	strh	r3, [r7, #2]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	707b      	strb	r3, [r7, #1]
	switch(ledstate){
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <manBlinkCLKHandler+0xa0>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <manBlinkCLKHandler+0x2c>
 8002002:	2b01      	cmp	r3, #1
 8002004:	d019      	beq.n	800203a <manBlinkCLKHandler+0x5e>
			lcd_ShowIntNum (x,y,num,len,BLACK,bc,sizey);
			setblinkCLKnumTimer(250);
		}
		break;
	}
}
 8002006:	e034      	b.n	8002072 <manBlinkCLKHandler+0x96>
		if(FLAG_BLINK_NUM==1){
 8002008:	4b1d      	ldr	r3, [pc, #116]	; (8002080 <manBlinkCLKHandler+0xa4>)
 800200a:	88db      	ldrh	r3, [r3, #6]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d12d      	bne.n	800206c <manBlinkCLKHandler+0x90>
			ledstate=OFF;
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <manBlinkCLKHandler+0xa0>)
 8002012:	2201      	movs	r2, #1
 8002014:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum (x,y,num,len,fc,bc,sizey);
 8002016:	787c      	ldrb	r4, [r7, #1]
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	88b9      	ldrh	r1, [r7, #4]
 800201c:	88f8      	ldrh	r0, [r7, #6]
 800201e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002022:	9302      	str	r3, [sp, #8]
 8002024:	8bbb      	ldrh	r3, [r7, #28]
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	8b3b      	ldrh	r3, [r7, #24]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	4623      	mov	r3, r4
 800202e:	f7ff fa97 	bl	8001560 <lcd_ShowIntNum>
			setblinkCLKnumTimer(250);
 8002032:	20fa      	movs	r0, #250	; 0xfa
 8002034:	f000 f9a2 	bl	800237c <setblinkCLKnumTimer>
		break;
 8002038:	e018      	b.n	800206c <manBlinkCLKHandler+0x90>
		if(FLAG_BLINK_NUM==1){
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <manBlinkCLKHandler+0xa4>)
 800203c:	88db      	ldrh	r3, [r3, #6]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d116      	bne.n	8002070 <manBlinkCLKHandler+0x94>
			ledstate=ON;
 8002042:	4b0e      	ldr	r3, [pc, #56]	; (800207c <manBlinkCLKHandler+0xa0>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
			lcd_ShowIntNum (x,y,num,len,BLACK,bc,sizey);
 8002048:	787c      	ldrb	r4, [r7, #1]
 800204a:	887a      	ldrh	r2, [r7, #2]
 800204c:	88b9      	ldrh	r1, [r7, #4]
 800204e:	88f8      	ldrh	r0, [r7, #6]
 8002050:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002054:	9302      	str	r3, [sp, #8]
 8002056:	8bbb      	ldrh	r3, [r7, #28]
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	2300      	movs	r3, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	4623      	mov	r3, r4
 8002060:	f7ff fa7e 	bl	8001560 <lcd_ShowIntNum>
			setblinkCLKnumTimer(250);
 8002064:	20fa      	movs	r0, #250	; 0xfa
 8002066:	f000 f989 	bl	800237c <setblinkCLKnumTimer>
		break;
 800206a:	e001      	b.n	8002070 <manBlinkCLKHandler+0x94>
		break;
 800206c:	bf00      	nop
 800206e:	e000      	b.n	8002072 <manBlinkCLKHandler+0x96>
		break;
 8002070:	bf00      	nop
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	bf00      	nop
 800207c:	20000014 	.word	0x20000014
 8002080:	20000160 	.word	0x20000160

08002084 <manTimeDurationHandler>:
void manTimeDurationHandler(){
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
	switch(manclkstate){
 8002088:	4b2d      	ldr	r3, [pc, #180]	; (8002140 <manTimeDurationHandler+0xbc>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d852      	bhi.n	8002136 <manTimeDurationHandler+0xb2>
 8002090:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <manTimeDurationHandler+0x14>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	080020bd 	.word	0x080020bd
 800209c:	080020cd 	.word	0x080020cd
 80020a0:	080020dd 	.word	0x080020dd
 80020a4:	080020ed 	.word	0x080020ed
 80020a8:	080020fd 	.word	0x080020fd
 80020ac:	0800210d 	.word	0x0800210d
 80020b0:	0800211d 	.word	0x0800211d
 80020b4:	0800211d 	.word	0x0800211d
 80020b8:	0800211d 	.word	0x0800211d
	case INIT:
		break;
	case HOLD:
		break;
	case SEC:
		if(clockvals[SEC]>60) clockvals[SEC]=0;
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <manTimeDurationHandler+0xc0>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b3c      	cmp	r3, #60	; 0x3c
 80020c2:	d92d      	bls.n	8002120 <manTimeDurationHandler+0x9c>
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <manTimeDurationHandler+0xc0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
		break;
 80020ca:	e029      	b.n	8002120 <manTimeDurationHandler+0x9c>
	case MIN:
		if(clockvals[MIN]>60) clockvals[MIN]=0;
 80020cc:	4b1d      	ldr	r3, [pc, #116]	; (8002144 <manTimeDurationHandler+0xc0>)
 80020ce:	785b      	ldrb	r3, [r3, #1]
 80020d0:	2b3c      	cmp	r3, #60	; 0x3c
 80020d2:	d927      	bls.n	8002124 <manTimeDurationHandler+0xa0>
 80020d4:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <manTimeDurationHandler+0xc0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	705a      	strb	r2, [r3, #1]
		break;
 80020da:	e023      	b.n	8002124 <manTimeDurationHandler+0xa0>
	case HOUR:
		if(clockvals[HOUR]>60) clockvals[HOUR]=0;
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <manTimeDurationHandler+0xc0>)
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	2b3c      	cmp	r3, #60	; 0x3c
 80020e2:	d921      	bls.n	8002128 <manTimeDurationHandler+0xa4>
 80020e4:	4b17      	ldr	r3, [pc, #92]	; (8002144 <manTimeDurationHandler+0xc0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	709a      	strb	r2, [r3, #2]
		break;
 80020ea:	e01d      	b.n	8002128 <manTimeDurationHandler+0xa4>
	case DAY:
		if(clockvals[DAY]>8) clockvals[DAY]=2;
 80020ec:	4b15      	ldr	r3, [pc, #84]	; (8002144 <manTimeDurationHandler+0xc0>)
 80020ee:	78db      	ldrb	r3, [r3, #3]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d91b      	bls.n	800212c <manTimeDurationHandler+0xa8>
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <manTimeDurationHandler+0xc0>)
 80020f6:	2202      	movs	r2, #2
 80020f8:	70da      	strb	r2, [r3, #3]
		break;
 80020fa:	e017      	b.n	800212c <manTimeDurationHandler+0xa8>
	case DATE:
		if(clockvals[DATE]>31) clockvals[DATE]=1;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <manTimeDurationHandler+0xc0>)
 80020fe:	791b      	ldrb	r3, [r3, #4]
 8002100:	2b1f      	cmp	r3, #31
 8002102:	d915      	bls.n	8002130 <manTimeDurationHandler+0xac>
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <manTimeDurationHandler+0xc0>)
 8002106:	2201      	movs	r2, #1
 8002108:	711a      	strb	r2, [r3, #4]
		break;
 800210a:	e011      	b.n	8002130 <manTimeDurationHandler+0xac>
	case MONTH:
		if(clockvals[MONTH]>12) clockvals[MONTH]=1;
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <manTimeDurationHandler+0xc0>)
 800210e:	795b      	ldrb	r3, [r3, #5]
 8002110:	2b0c      	cmp	r3, #12
 8002112:	d90f      	bls.n	8002134 <manTimeDurationHandler+0xb0>
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <manTimeDurationHandler+0xc0>)
 8002116:	2201      	movs	r2, #1
 8002118:	715a      	strb	r2, [r3, #5]
		break;
 800211a:	e00b      	b.n	8002134 <manTimeDurationHandler+0xb0>
	case YEAR:
		break;
 800211c:	bf00      	nop
 800211e:	e00a      	b.n	8002136 <manTimeDurationHandler+0xb2>
		break;
 8002120:	bf00      	nop
 8002122:	e008      	b.n	8002136 <manTimeDurationHandler+0xb2>
		break;
 8002124:	bf00      	nop
 8002126:	e006      	b.n	8002136 <manTimeDurationHandler+0xb2>
		break;
 8002128:	bf00      	nop
 800212a:	e004      	b.n	8002136 <manTimeDurationHandler+0xb2>
		break;
 800212c:	bf00      	nop
 800212e:	e002      	b.n	8002136 <manTimeDurationHandler+0xb2>
		break;
 8002130:	bf00      	nop
 8002132:	e000      	b.n	8002136 <manTimeDurationHandler+0xb2>
		break;
 8002134:	bf00      	nop
	}
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	20000013 	.word	0x20000013
 8002144:	20000004 	.word	0x20000004

08002148 <rtc_auto_fsm>:
#include <rtc_auto.h>

enum AUTOCLKSTATE{INIT,HOLD,RUN};
enum AUTOCLKSTATE autoclkstate=INIT;

void rtc_auto_fsm(){
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af02      	add	r7, sp, #8
	switch (autoclkstate) {
 800214e:	4b30      	ldr	r3, [pc, #192]	; (8002210 <rtc_auto_fsm+0xc8>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d01b      	beq.n	800218e <rtc_auto_fsm+0x46>
 8002156:	2b02      	cmp	r3, #2
 8002158:	dc57      	bgt.n	800220a <rtc_auto_fsm+0xc2>
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <rtc_auto_fsm+0x1c>
 800215e:	2b01      	cmp	r3, #1
 8002160:	d00d      	beq.n	800217e <rtc_auto_fsm+0x36>
			}
			setAutoTimer(50);
		}
		break;
	}
}
 8002162:	e052      	b.n	800220a <rtc_auto_fsm+0xc2>
		if(FLAG_AUTO==1){
 8002164:	4b2b      	ldr	r3, [pc, #172]	; (8002214 <rtc_auto_fsm+0xcc>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d149      	bne.n	8002200 <rtc_auto_fsm+0xb8>
			updateTime();
 800216c:	f7fe fe20 	bl	8000db0 <updateTime>
			autoclkstate=RUN;
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <rtc_auto_fsm+0xc8>)
 8002172:	2202      	movs	r2, #2
 8002174:	701a      	strb	r2, [r3, #0]
			setAutoTimer(100);
 8002176:	2064      	movs	r0, #100	; 0x64
 8002178:	f000 f8ac 	bl	80022d4 <setAutoTimer>
		break;
 800217c:	e040      	b.n	8002200 <rtc_auto_fsm+0xb8>
		if(mode==AUTO_M) autoclkstate=INIT;
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <rtc_auto_fsm+0xd0>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d13e      	bne.n	8002204 <rtc_auto_fsm+0xbc>
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <rtc_auto_fsm+0xc8>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
		break;
 800218c:	e03a      	b.n	8002204 <rtc_auto_fsm+0xbc>
		autoButtonHandler();
 800218e:	f000 f855 	bl	800223c <autoButtonHandler>
		if(FLAG_AUTO==1){
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <rtc_auto_fsm+0xcc>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d136      	bne.n	8002208 <rtc_auto_fsm+0xc0>
			ds3231_ReadTime();
 800219a:	f7fe fca5 	bl	8000ae8 <ds3231_ReadTime>
			displayTime();
 800219e:	f7fe fe37 	bl	8000e10 <displayTime>
			clockvals[0]=ds3231_sec;
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <rtc_auto_fsm+0xd4>)
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <rtc_auto_fsm+0xd8>)
 80021a8:	701a      	strb	r2, [r3, #0]
			clockvals[1]=ds3231_min;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <rtc_auto_fsm+0xdc>)
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <rtc_auto_fsm+0xd8>)
 80021b0:	705a      	strb	r2, [r3, #1]
			clockvals[2]=ds3231_hours;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <rtc_auto_fsm+0xe0>)
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <rtc_auto_fsm+0xd8>)
 80021b8:	709a      	strb	r2, [r3, #2]
			clockvals[3]=ds3231_day;
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <rtc_auto_fsm+0xe4>)
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <rtc_auto_fsm+0xd8>)
 80021c0:	70da      	strb	r2, [r3, #3]
			clockvals[4]=ds3231_date;
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <rtc_auto_fsm+0xe8>)
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <rtc_auto_fsm+0xd8>)
 80021c8:	711a      	strb	r2, [r3, #4]
			clockvals[5]=ds3231_month;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <rtc_auto_fsm+0xec>)
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	4b14      	ldr	r3, [pc, #80]	; (8002220 <rtc_auto_fsm+0xd8>)
 80021d0:	715a      	strb	r2, [r3, #5]
			clockvals[6]=ds3231_year;
 80021d2:	4b19      	ldr	r3, [pc, #100]	; (8002238 <rtc_auto_fsm+0xf0>)
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <rtc_auto_fsm+0xd8>)
 80021d8:	719a      	strb	r2, [r3, #6]
			if(checkAlarm()==1){
 80021da:	f000 f84d 	bl	8002278 <checkAlarm>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d109      	bne.n	80021f8 <rtc_auto_fsm+0xb0>
				lcd_DrawCircle(50, 50,RED,10, RED);
 80021e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	230a      	movs	r3, #10
 80021ec:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80021f0:	2132      	movs	r1, #50	; 0x32
 80021f2:	2032      	movs	r0, #50	; 0x32
 80021f4:	f7ff fc41 	bl	8001a7a <lcd_DrawCircle>
			setAutoTimer(50);
 80021f8:	2032      	movs	r0, #50	; 0x32
 80021fa:	f000 f86b 	bl	80022d4 <setAutoTimer>
		break;
 80021fe:	e003      	b.n	8002208 <rtc_auto_fsm+0xc0>
		break;
 8002200:	bf00      	nop
 8002202:	e002      	b.n	800220a <rtc_auto_fsm+0xc2>
		break;
 8002204:	bf00      	nop
 8002206:	e000      	b.n	800220a <rtc_auto_fsm+0xc2>
		break;
 8002208:	bf00      	nop
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000004e 	.word	0x2000004e
 8002214:	20000160 	.word	0x20000160
 8002218:	2000004c 	.word	0x2000004c
 800221c:	20000070 	.word	0x20000070
 8002220:	20000004 	.word	0x20000004
 8002224:	20000072 	.word	0x20000072
 8002228:	20000075 	.word	0x20000075
 800222c:	20000074 	.word	0x20000074
 8002230:	20000073 	.word	0x20000073
 8002234:	20000076 	.word	0x20000076
 8002238:	20000071 	.word	0x20000071

0800223c <autoButtonHandler>:

void autoButtonHandler(){
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	if(FLAG_BUT_CD==1){
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <autoButtonHandler+0x2c>)
 8002242:	885b      	ldrh	r3, [r3, #2]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10c      	bne.n	8002262 <autoButtonHandler+0x26>
		if(button_count[0]==1){
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <autoButtonHandler+0x30>)
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <autoButtonHandler+0x20>
			mode=MANUAL_M;
 8002250:	4b07      	ldr	r3, [pc, #28]	; (8002270 <autoButtonHandler+0x34>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
			autoclkstate=HOLD;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <autoButtonHandler+0x38>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
		}
		setbutCooldownTimer(50);
 800225c:	2032      	movs	r0, #50	; 0x32
 800225e:	f000 f855 	bl	800230c <setbutCooldownTimer>
	}
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000160 	.word	0x20000160
 800226c:	20000050 	.word	0x20000050
 8002270:	2000004c 	.word	0x2000004c
 8002274:	2000004e 	.word	0x2000004e

08002278 <checkAlarm>:

int checkAlarm(){
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
	for(int i=0;i<7;i++){
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	e00e      	b.n	80022a2 <checkAlarm+0x2a>
		if(clockvals[i]!=alarmvals[i]) return 0;
 8002284:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <checkAlarm+0x40>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	490b      	ldr	r1, [pc, #44]	; (80022bc <checkAlarm+0x44>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	440b      	add	r3, r1
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <checkAlarm+0x24>
 8002298:	2300      	movs	r3, #0
 800229a:	e006      	b.n	80022aa <checkAlarm+0x32>
	for(int i=0;i<7;i++){
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3301      	adds	r3, #1
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b06      	cmp	r3, #6
 80022a6:	dded      	ble.n	8002284 <checkAlarm+0xc>
	}
	return 1;
 80022a8:	2301      	movs	r3, #1
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000004 	.word	0x20000004
 80022bc:	2000000c 	.word	0x2000000c

080022c0 <timer_init>:

uint16_t flag_timer2[MAX_SOFTWARETIMER];
uint16_t timer2_counter[MAX_SOFTWARETIMER];
uint16_t timer2_MUL[MAX_SOFTWARETIMER];

void timer_init(){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <timer_init+0x10>)
 80022c6:	f003 f9c5 	bl	8005654 <HAL_TIM_Base_Start_IT>
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200001f4 	.word	0x200001f4

080022d4 <setAutoTimer>:

void setAutoTimer(uint16_t duration){
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL[0] = duration/TIMER_CYCLE_2;
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <setAutoTimer+0x2c>)
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	8013      	strh	r3, [r2, #0]
	timer2_counter[0] = timer2_MUL[0];
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <setAutoTimer+0x2c>)
 80022e6:	881a      	ldrh	r2, [r3, #0]
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <setAutoTimer+0x30>)
 80022ea:	801a      	strh	r2, [r3, #0]
	flag_timer2[0] = 0;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <setAutoTimer+0x34>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	801a      	strh	r2, [r3, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000188 	.word	0x20000188
 8002304:	20000174 	.word	0x20000174
 8002308:	20000160 	.word	0x20000160

0800230c <setbutCooldownTimer>:
void setbutCooldownTimer(uint16_t duration){
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
	timer2_MUL[1] = duration/TIMER_CYCLE_2;
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <setbutCooldownTimer+0x2c>)
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	8053      	strh	r3, [r2, #2]
	timer2_counter[1] = timer2_MUL[1];
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <setbutCooldownTimer+0x2c>)
 800231e:	885a      	ldrh	r2, [r3, #2]
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <setbutCooldownTimer+0x30>)
 8002322:	805a      	strh	r2, [r3, #2]
	flag_timer2[1] = 0;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <setbutCooldownTimer+0x34>)
 8002326:	2200      	movs	r2, #0
 8002328:	805a      	strh	r2, [r3, #2]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000188 	.word	0x20000188
 800233c:	20000174 	.word	0x20000174
 8002340:	20000160 	.word	0x20000160

08002344 <setClockTimer>:

void setClockTimer(uint16_t duration){
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL[2] = duration/TIMER_CYCLE_2;
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <setClockTimer+0x2c>)
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	8093      	strh	r3, [r2, #4]
	timer2_counter[2] = timer2_MUL[2];
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <setClockTimer+0x2c>)
 8002356:	889a      	ldrh	r2, [r3, #4]
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <setClockTimer+0x30>)
 800235a:	809a      	strh	r2, [r3, #4]
	flag_timer2[2] = 0;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <setClockTimer+0x34>)
 800235e:	2200      	movs	r2, #0
 8002360:	809a      	strh	r2, [r3, #4]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000188 	.word	0x20000188
 8002374:	20000174 	.word	0x20000174
 8002378:	20000160 	.word	0x20000160

0800237c <setblinkCLKnumTimer>:

void setblinkCLKnumTimer(uint16_t duration){
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	80fb      	strh	r3, [r7, #6]
	timer2_MUL[3] = duration/TIMER_CYCLE_2;
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <setblinkCLKnumTimer+0x2c>)
 8002388:	88fb      	ldrh	r3, [r7, #6]
 800238a:	80d3      	strh	r3, [r2, #6]
	timer2_counter[3] = timer2_MUL[3];
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <setblinkCLKnumTimer+0x2c>)
 800238e:	88da      	ldrh	r2, [r3, #6]
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <setblinkCLKnumTimer+0x30>)
 8002392:	80da      	strh	r2, [r3, #6]
	flag_timer2[3] = 0;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <setblinkCLKnumTimer+0x34>)
 8002396:	2200      	movs	r2, #0
 8002398:	80da      	strh	r2, [r3, #6]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000188 	.word	0x20000188
 80023ac:	20000174 	.word	0x20000174
 80023b0:	20000160 	.word	0x20000160

080023b4 <setAutoIncTimer>:

void setAutoIncTimer(uint16_t duration){
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	80fb      	strh	r3, [r7, #6]
	timer2_MUL[4] = duration/TIMER_CYCLE_2;
 80023be:	4a08      	ldr	r2, [pc, #32]	; (80023e0 <setAutoIncTimer+0x2c>)
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	8113      	strh	r3, [r2, #8]
	timer2_counter[4] = timer2_MUL[4];
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <setAutoIncTimer+0x2c>)
 80023c6:	891a      	ldrh	r2, [r3, #8]
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <setAutoIncTimer+0x30>)
 80023ca:	811a      	strh	r2, [r3, #8]
	flag_timer2[4] = 0;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <setAutoIncTimer+0x34>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	811a      	strh	r2, [r3, #8]
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000188 	.word	0x20000188
 80023e4:	20000174 	.word	0x20000174
 80023e8:	20000160 	.word	0x20000160

080023ec <setHoldButtonTimer>:

void setHoldButtonTimer(uint16_t duration){
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
	timer2_MUL[5] = duration/TIMER_CYCLE_2;
 80023f6:	4a08      	ldr	r2, [pc, #32]	; (8002418 <setHoldButtonTimer+0x2c>)
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	8153      	strh	r3, [r2, #10]
	timer2_counter[5] = timer2_MUL[5];
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <setHoldButtonTimer+0x2c>)
 80023fe:	895a      	ldrh	r2, [r3, #10]
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <setHoldButtonTimer+0x30>)
 8002402:	815a      	strh	r2, [r3, #10]
	flag_timer2[5] = 0;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <setHoldButtonTimer+0x34>)
 8002406:	2200      	movs	r2, #0
 8002408:	815a      	strh	r2, [r3, #10]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000188 	.word	0x20000188
 800241c:	20000174 	.word	0x20000174
 8002420:	20000160 	.word	0x20000160

08002424 <timer2Run>:
void timer2Run(){
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_SOFTWARETIMER;i++){
 800242a:	2300      	movs	r3, #0
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	e01d      	b.n	800246c <timer2Run+0x48>
		if(timer2_counter[i] > 0) timer2_counter[i]--;
 8002430:	4a13      	ldr	r2, [pc, #76]	; (8002480 <timer2Run+0x5c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <timer2Run+0x2c>
 800243c:	4a10      	ldr	r2, [pc, #64]	; (8002480 <timer2Run+0x5c>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002444:	3b01      	subs	r3, #1
 8002446:	b299      	uxth	r1, r3
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <timer2Run+0x5c>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(timer2_counter[i] == 0) flag_timer2[i] = 1;
 8002450:	4a0b      	ldr	r2, [pc, #44]	; (8002480 <timer2Run+0x5c>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <timer2Run+0x42>
 800245c:	4a09      	ldr	r2, [pc, #36]	; (8002484 <timer2Run+0x60>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2101      	movs	r1, #1
 8002462:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<MAX_SOFTWARETIMER;i++){
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3301      	adds	r3, #1
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b09      	cmp	r3, #9
 8002470:	ddde      	ble.n	8002430 <timer2Run+0xc>
	}
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	20000174 	.word	0x20000174
 8002484:	20000160 	.word	0x20000160

08002488 <HAL_TIM_PeriodElapsedCallback>:

int counter=50;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
		timer2Run();
 8002490:	f7ff ffc8 	bl	8002424 <timer2Run>
		if(counter>0) counter--;
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	dd04      	ble.n	80024a6 <HAL_TIM_PeriodElapsedCallback+0x1e>
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80024a4:	6013      	str	r3, [r2, #0]
		if(counter==0){
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d104      	bne.n	80024b8 <HAL_TIM_PeriodElapsedCallback+0x30>
			button_Scan();
 80024ae:	f7fe fa49 	bl	8000944 <button_Scan>
			counter=50;
 80024b2:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80024b4:	2232      	movs	r2, #50	; 0x32
 80024b6:	601a      	str	r2, [r3, #0]
		}
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000018 	.word	0x20000018

080024c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024c8:	4b17      	ldr	r3, [pc, #92]	; (8002528 <MX_SPI1_Init+0x64>)
 80024ca:	4a18      	ldr	r2, [pc, #96]	; (800252c <MX_SPI1_Init+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ce:	4b16      	ldr	r3, [pc, #88]	; (8002528 <MX_SPI1_Init+0x64>)
 80024d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024d6:	4b14      	ldr	r3, [pc, #80]	; (8002528 <MX_SPI1_Init+0x64>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MX_SPI1_Init+0x64>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <MX_SPI1_Init+0x64>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e8:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <MX_SPI1_Init+0x64>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024ee:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <MX_SPI1_Init+0x64>)
 80024f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024f6:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <MX_SPI1_Init+0x64>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <MX_SPI1_Init+0x64>)
 80024fe:	2200      	movs	r2, #0
 8002500:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <MX_SPI1_Init+0x64>)
 8002504:	2200      	movs	r2, #0
 8002506:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <MX_SPI1_Init+0x64>)
 800250a:	2200      	movs	r2, #0
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <MX_SPI1_Init+0x64>)
 8002510:	220a      	movs	r2, #10
 8002512:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002514:	4804      	ldr	r0, [pc, #16]	; (8002528 <MX_SPI1_Init+0x64>)
 8002516:	f002 fb9d 	bl	8004c54 <HAL_SPI_Init>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002520:	f7ff fbdc 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	2000019c 	.word	0x2000019c
 800252c:	40013000 	.word	0x40013000

08002530 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_SPI_MspInit+0x84>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12b      	bne.n	80025aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 800255c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002560:	6453      	str	r3, [r2, #68]	; 0x44
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_SPI_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800258a:	2338      	movs	r3, #56	; 0x38
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800259a:	2305      	movs	r3, #5
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_SPI_MspInit+0x8c>)
 80025a6:	f000 fc3d 	bl	8002e24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40013000 	.word	0x40013000
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020400 	.word	0x40020400

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_MspInit+0x4c>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_MspInit+0x4c>)
 80025d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d4:	6453      	str	r3, [r2, #68]	; 0x44
 80025d6:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_MspInit+0x4c>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_MspInit+0x4c>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_MspInit+0x4c>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_MspInit+0x4c>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <NMI_Handler+0x4>

08002616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261a:	e7fe      	b.n	800261a <HardFault_Handler+0x4>

0800261c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002620:	e7fe      	b.n	8002620 <MemManage_Handler+0x4>

08002622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <UsageFault_Handler+0x4>

0800262e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265c:	f000 f9fa 	bl	8002a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <TIM2_IRQHandler+0x10>)
 800266a:	f003 f863 	bl	8005734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200001f4 	.word	0x200001f4

08002678 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800267c:	4802      	ldr	r0, [pc, #8]	; (8002688 <USART1_IRQHandler+0x10>)
 800267e:	f003 fd2b 	bl	80060d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	2000023c 	.word	0x2000023c

0800268c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <SystemInit+0x20>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <SystemInit+0x20>)
 8002698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800269c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b6:	f107 0308 	add.w	r3, r7, #8
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c4:	463b      	mov	r3, r7
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <MX_TIM2_Init+0x94>)
 80026ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <MX_TIM2_Init+0x94>)
 80026d6:	f240 628f 	movw	r2, #1679	; 0x68f
 80026da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <MX_TIM2_Init+0x94>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80026e2:	4b18      	ldr	r3, [pc, #96]	; (8002744 <MX_TIM2_Init+0x94>)
 80026e4:	2263      	movs	r2, #99	; 0x63
 80026e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <MX_TIM2_Init+0x94>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <MX_TIM2_Init+0x94>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026f4:	4813      	ldr	r0, [pc, #76]	; (8002744 <MX_TIM2_Init+0x94>)
 80026f6:	f002 ff5d 	bl	80055b4 <HAL_TIM_Base_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002700:	f7ff faec 	bl	8001cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	4619      	mov	r1, r3
 8002710:	480c      	ldr	r0, [pc, #48]	; (8002744 <MX_TIM2_Init+0x94>)
 8002712:	f003 f917 	bl	8005944 <HAL_TIM_ConfigClockSource>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800271c:	f7ff fade 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002720:	2300      	movs	r3, #0
 8002722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002728:	463b      	mov	r3, r7
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <MX_TIM2_Init+0x94>)
 800272e:	f003 fb33 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002738:	f7ff fad0 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200001f4 	.word	0x200001f4

08002748 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d115      	bne.n	8002786 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_TIM_Base_MspInit+0x48>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4a0b      	ldr	r2, [pc, #44]	; (8002790 <HAL_TIM_Base_MspInit+0x48>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6413      	str	r3, [r2, #64]	; 0x40
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_TIM_Base_MspInit+0x48>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	201c      	movs	r0, #28
 800277c:	f000 fa89 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002780:	201c      	movs	r0, #28
 8002782:	f000 faa2 	bl	8002cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800

08002794 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002798:	2201      	movs	r2, #1
 800279a:	4903      	ldr	r1, [pc, #12]	; (80027a8 <uart_init_rs232+0x14>)
 800279c:	4803      	ldr	r0, [pc, #12]	; (80027ac <uart_init_rs232+0x18>)
 800279e:	f003 fc6a 	bl	8006076 <HAL_UART_Receive_IT>
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000004f 	.word	0x2000004f
 80027ac:	2000023c 	.word	0x2000023c

080027b0 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a08      	ldr	r2, [pc, #32]	; (80027e0 <HAL_UART_RxCpltCallback+0x30>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10a      	bne.n	80027d8 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 80027c2:	230a      	movs	r3, #10
 80027c4:	2201      	movs	r2, #1
 80027c6:	4907      	ldr	r1, [pc, #28]	; (80027e4 <HAL_UART_RxCpltCallback+0x34>)
 80027c8:	4807      	ldr	r0, [pc, #28]	; (80027e8 <HAL_UART_RxCpltCallback+0x38>)
 80027ca:	f003 fbc2 	bl	8005f52 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 80027ce:	2201      	movs	r2, #1
 80027d0:	4904      	ldr	r1, [pc, #16]	; (80027e4 <HAL_UART_RxCpltCallback+0x34>)
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <HAL_UART_RxCpltCallback+0x38>)
 80027d4:	f003 fc4f 	bl	8006076 <HAL_UART_Receive_IT>
	}
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40011000 	.word	0x40011000
 80027e4:	2000004f 	.word	0x2000004f
 80027e8:	2000023c 	.word	0x2000023c

080027ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <MX_USART1_UART_Init+0x4c>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <MX_USART1_UART_Init+0x50>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027f6:	4b10      	ldr	r3, [pc, #64]	; (8002838 <MX_USART1_UART_Init+0x4c>)
 80027f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <MX_USART1_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <MX_USART1_UART_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <MX_USART1_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <MX_USART1_UART_Init+0x4c>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <MX_USART1_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <MX_USART1_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002822:	4805      	ldr	r0, [pc, #20]	; (8002838 <MX_USART1_UART_Init+0x4c>)
 8002824:	f003 fb48 	bl	8005eb8 <HAL_UART_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800282e:	f7ff fa55 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000023c 	.word	0x2000023c
 800283c:	40011000 	.word	0x40011000

08002840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <HAL_UART_MspInit+0x94>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d134      	bne.n	80028cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <HAL_UART_MspInit+0x98>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <HAL_UART_MspInit+0x98>)
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	6453      	str	r3, [r2, #68]	; 0x44
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <HAL_UART_MspInit+0x98>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <HAL_UART_MspInit+0x98>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <HAL_UART_MspInit+0x98>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_UART_MspInit+0x98>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800289a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a8:	2303      	movs	r3, #3
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028ac:	2307      	movs	r3, #7
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	4809      	ldr	r0, [pc, #36]	; (80028dc <HAL_UART_MspInit+0x9c>)
 80028b8:	f000 fab4 	bl	8002e24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2100      	movs	r1, #0
 80028c0:	2025      	movs	r0, #37	; 0x25
 80028c2:	f000 f9e6 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028c6:	2025      	movs	r0, #37	; 0x25
 80028c8:	f000 f9ff 	bl	8002cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000

080028e0 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	0092      	lsls	r2, r2, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4413      	add	r3, r2
 8002904:	b2db      	uxtb	r3, r3
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <DEC2BCD+0x44>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	08db      	lsrs	r3, r3, #3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	b258      	sxtb	r0, r3
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <DEC2BCD+0x44>)
 8002932:	fba3 1302 	umull	r1, r3, r3, r2
 8002936:	08d9      	lsrs	r1, r3, #3
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	b25b      	sxtb	r3, r3
 8002946:	4303      	orrs	r3, r0
 8002948:	b25b      	sxtb	r3, r3
 800294a:	b2db      	uxtb	r3, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	cccccccd 	.word	0xcccccccd

0800295c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800295c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002960:	480d      	ldr	r0, [pc, #52]	; (8002998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002962:	490e      	ldr	r1, [pc, #56]	; (800299c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002964:	4a0e      	ldr	r2, [pc, #56]	; (80029a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002968:	e002      	b.n	8002970 <LoopCopyDataInit>

0800296a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800296c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296e:	3304      	adds	r3, #4

08002970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002974:	d3f9      	bcc.n	800296a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002976:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002978:	4c0b      	ldr	r4, [pc, #44]	; (80029a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800297c:	e001      	b.n	8002982 <LoopFillZerobss>

0800297e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002980:	3204      	adds	r2, #4

08002982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002984:	d3fb      	bcc.n	800297e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002986:	f7ff fe81 	bl	800268c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800298a:	f004 fb2d 	bl	8006fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298e:	f7ff f8ed 	bl	8001b6c <main>
  bx  lr    
 8002992:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800299c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80029a0:	0800a000 	.word	0x0800a000
  ldr r2, =_sbss
 80029a4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80029a8:	20000284 	.word	0x20000284

080029ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ac:	e7fe      	b.n	80029ac <ADC_IRQHandler>
	...

080029b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b4:	4b0e      	ldr	r3, [pc, #56]	; (80029f0 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_Init+0x40>)
 80029ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_Init+0x40>)
 80029c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <HAL_Init+0x40>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d8:	2003      	movs	r0, #3
 80029da:	f000 f94f 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029de:	200f      	movs	r0, #15
 80029e0:	f000 f808 	bl	80029f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e4:	f7ff fdec 	bl	80025c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023c00 	.word	0x40023c00

080029f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_InitTick+0x54>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_InitTick+0x58>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f967 	bl	8002ce6 <HAL_SYSTICK_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00e      	b.n	8002a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b0f      	cmp	r3, #15
 8002a26:	d80a      	bhi.n	8002a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f000 f92f 	bl	8002c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a34:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <HAL_InitTick+0x5c>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2000001c 	.word	0x2000001c
 8002a4c:	20000024 	.word	0x20000024
 8002a50:	20000020 	.word	0x20000020

08002a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_IncTick+0x24>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_IncTick+0x24>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000024 	.word	0x20000024
 8002a78:	20000280 	.word	0x20000280

08002a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_GetTick+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000280 	.word	0x20000280

08002a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff ffee 	bl	8002a7c <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d005      	beq.n	8002aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_Delay+0x44>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aba:	bf00      	nop
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8f7      	bhi.n	8002abc <HAL_Delay+0x28>
  {
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000024 	.word	0x20000024

08002adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0e:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	60d3      	str	r3, [r2, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db0b      	blt.n	8002b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <__NVIC_EnableIRQ+0x38>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100

08002b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0a      	blt.n	8002ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <__NVIC_SetPriority+0x4c>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba4:	e00a      	b.n	8002bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4908      	ldr	r1, [pc, #32]	; (8002bcc <__NVIC_SetPriority+0x50>)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b04      	subs	r3, #4
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	440b      	add	r3, r1
 8002bba:	761a      	strb	r2, [r3, #24]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	; 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f1c3 0307 	rsb	r3, r3, #7
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	bf28      	it	cs
 8002bee:	2304      	movcs	r3, #4
 8002bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d902      	bls.n	8002c00 <NVIC_EncodePriority+0x30>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3b03      	subs	r3, #3
 8002bfe:	e000      	b.n	8002c02 <NVIC_EncodePriority+0x32>
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	401a      	ands	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c18:	f04f 31ff 	mov.w	r1, #4294967295
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43d9      	mvns	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	4313      	orrs	r3, r2
         );
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3724      	adds	r7, #36	; 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f7ff ff8e 	bl	8002b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff29 	bl	8002adc <__NVIC_SetPriorityGrouping>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca4:	f7ff ff3e 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff8e 	bl	8002bd0 <NVIC_EncodePriority>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff5d 	bl	8002b7c <__NVIC_SetPriority>
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff31 	bl	8002b40 <__NVIC_EnableIRQ>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffa2 	bl	8002c38 <SysTick_Config>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d0c:	f7ff feb6 	bl	8002a7c <HAL_GetTick>
 8002d10:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d008      	beq.n	8002d30 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e052      	b.n	8002dd6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0216 	bic.w	r2, r2, #22
 8002d3e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d103      	bne.n	8002d60 <HAL_DMA_Abort+0x62>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0208 	bic.w	r2, r2, #8
 8002d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d80:	e013      	b.n	8002daa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d82:	f7ff fe7b 	bl	8002a7c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b05      	cmp	r3, #5
 8002d8e:	d90c      	bls.n	8002daa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e015      	b.n	8002dd6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e4      	bne.n	8002d82 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	223f      	movs	r2, #63	; 0x3f
 8002dbe:	409a      	lsls	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d004      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e00c      	b.n	8002e16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2205      	movs	r2, #5
 8002e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	; 0x24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e16b      	b.n	8003118 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e40:	2201      	movs	r2, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	f040 815a 	bne.w	8003112 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d005      	beq.n	8002e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d130      	bne.n	8002ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eac:	2201      	movs	r2, #1
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 0201 	and.w	r2, r3, #1
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d017      	beq.n	8002f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d123      	bne.n	8002f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	08da      	lsrs	r2, r3, #3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3208      	adds	r2, #8
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	220f      	movs	r2, #15
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	08da      	lsrs	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3208      	adds	r2, #8
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0203 	and.w	r2, r3, #3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80b4 	beq.w	8003112 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b60      	ldr	r3, [pc, #384]	; (8003130 <HAL_GPIO_Init+0x30c>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	4a5f      	ldr	r2, [pc, #380]	; (8003130 <HAL_GPIO_Init+0x30c>)
 8002fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fba:	4b5d      	ldr	r3, [pc, #372]	; (8003130 <HAL_GPIO_Init+0x30c>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fc6:	4a5b      	ldr	r2, [pc, #364]	; (8003134 <HAL_GPIO_Init+0x310>)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	3302      	adds	r3, #2
 8002fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_GPIO_Init+0x314>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d02b      	beq.n	800304a <HAL_GPIO_Init+0x226>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a51      	ldr	r2, [pc, #324]	; (800313c <HAL_GPIO_Init+0x318>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d025      	beq.n	8003046 <HAL_GPIO_Init+0x222>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a50      	ldr	r2, [pc, #320]	; (8003140 <HAL_GPIO_Init+0x31c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01f      	beq.n	8003042 <HAL_GPIO_Init+0x21e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4f      	ldr	r2, [pc, #316]	; (8003144 <HAL_GPIO_Init+0x320>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d019      	beq.n	800303e <HAL_GPIO_Init+0x21a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4e      	ldr	r2, [pc, #312]	; (8003148 <HAL_GPIO_Init+0x324>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0x216>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4d      	ldr	r2, [pc, #308]	; (800314c <HAL_GPIO_Init+0x328>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00d      	beq.n	8003036 <HAL_GPIO_Init+0x212>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4c      	ldr	r2, [pc, #304]	; (8003150 <HAL_GPIO_Init+0x32c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d007      	beq.n	8003032 <HAL_GPIO_Init+0x20e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a4b      	ldr	r2, [pc, #300]	; (8003154 <HAL_GPIO_Init+0x330>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d101      	bne.n	800302e <HAL_GPIO_Init+0x20a>
 800302a:	2307      	movs	r3, #7
 800302c:	e00e      	b.n	800304c <HAL_GPIO_Init+0x228>
 800302e:	2308      	movs	r3, #8
 8003030:	e00c      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003032:	2306      	movs	r3, #6
 8003034:	e00a      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003036:	2305      	movs	r3, #5
 8003038:	e008      	b.n	800304c <HAL_GPIO_Init+0x228>
 800303a:	2304      	movs	r3, #4
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x228>
 800303e:	2303      	movs	r3, #3
 8003040:	e004      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003042:	2302      	movs	r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x228>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x228>
 800304a:	2300      	movs	r3, #0
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	f002 0203 	and.w	r2, r2, #3
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4093      	lsls	r3, r2
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800305c:	4935      	ldr	r1, [pc, #212]	; (8003134 <HAL_GPIO_Init+0x310>)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306a:	4b3b      	ldr	r3, [pc, #236]	; (8003158 <HAL_GPIO_Init+0x334>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800308e:	4a32      	ldr	r2, [pc, #200]	; (8003158 <HAL_GPIO_Init+0x334>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003094:	4b30      	ldr	r3, [pc, #192]	; (8003158 <HAL_GPIO_Init+0x334>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <HAL_GPIO_Init+0x334>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_GPIO_Init+0x334>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e2:	4a1d      	ldr	r2, [pc, #116]	; (8003158 <HAL_GPIO_Init+0x334>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <HAL_GPIO_Init+0x334>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800310c:	4a12      	ldr	r2, [pc, #72]	; (8003158 <HAL_GPIO_Init+0x334>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3301      	adds	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	f67f ae90 	bls.w	8002e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40013800 	.word	0x40013800
 8003138:	40020000 	.word	0x40020000
 800313c:	40020400 	.word	0x40020400
 8003140:	40020800 	.word	0x40020800
 8003144:	40020c00 	.word	0x40020c00
 8003148:	40021000 	.word	0x40021000
 800314c:	40021400 	.word	0x40021400
 8003150:	40021800 	.word	0x40021800
 8003154:	40021c00 	.word	0x40021c00
 8003158:	40013c00 	.word	0x40013c00

0800315c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
 8003168:	4613      	mov	r3, r2
 800316a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800316c:	787b      	ldrb	r3, [r7, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003178:	e003      	b.n	8003182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	041a      	lsls	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	619a      	str	r2, [r3, #24]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e12b      	b.n	80033fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd ffce 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0201 	bic.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f4:	f001 fd06 	bl	8004c04 <HAL_RCC_GetPCLK1Freq>
 80031f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a81      	ldr	r2, [pc, #516]	; (8003404 <HAL_I2C_Init+0x274>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d807      	bhi.n	8003214 <HAL_I2C_Init+0x84>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a80      	ldr	r2, [pc, #512]	; (8003408 <HAL_I2C_Init+0x278>)
 8003208:	4293      	cmp	r3, r2
 800320a:	bf94      	ite	ls
 800320c:	2301      	movls	r3, #1
 800320e:	2300      	movhi	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e006      	b.n	8003222 <HAL_I2C_Init+0x92>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4a7d      	ldr	r2, [pc, #500]	; (800340c <HAL_I2C_Init+0x27c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	bf94      	ite	ls
 800321c:	2301      	movls	r3, #1
 800321e:	2300      	movhi	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e0e7      	b.n	80033fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a78      	ldr	r2, [pc, #480]	; (8003410 <HAL_I2C_Init+0x280>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0c9b      	lsrs	r3, r3, #18
 8003234:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a6a      	ldr	r2, [pc, #424]	; (8003404 <HAL_I2C_Init+0x274>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d802      	bhi.n	8003264 <HAL_I2C_Init+0xd4>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	3301      	adds	r3, #1
 8003262:	e009      	b.n	8003278 <HAL_I2C_Init+0xe8>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	4a69      	ldr	r2, [pc, #420]	; (8003414 <HAL_I2C_Init+0x284>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	3301      	adds	r3, #1
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	430b      	orrs	r3, r1
 800327e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800328a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	495c      	ldr	r1, [pc, #368]	; (8003404 <HAL_I2C_Init+0x274>)
 8003294:	428b      	cmp	r3, r1
 8003296:	d819      	bhi.n	80032cc <HAL_I2C_Init+0x13c>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1e59      	subs	r1, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a6:	1c59      	adds	r1, r3, #1
 80032a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032ac:	400b      	ands	r3, r1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_I2C_Init+0x138>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1e59      	subs	r1, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c6:	e051      	b.n	800336c <HAL_I2C_Init+0x1dc>
 80032c8:	2304      	movs	r3, #4
 80032ca:	e04f      	b.n	800336c <HAL_I2C_Init+0x1dc>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d111      	bne.n	80032f8 <HAL_I2C_Init+0x168>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1e58      	subs	r0, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	440b      	add	r3, r1
 80032e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e6:	3301      	adds	r3, #1
 80032e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e012      	b.n	800331e <HAL_I2C_Init+0x18e>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	0099      	lsls	r1, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	fbb0 f3f3 	udiv	r3, r0, r3
 800330e:	3301      	adds	r3, #1
 8003310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf0c      	ite	eq
 8003318:	2301      	moveq	r3, #1
 800331a:	2300      	movne	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Init+0x196>
 8003322:	2301      	movs	r3, #1
 8003324:	e022      	b.n	800336c <HAL_I2C_Init+0x1dc>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10e      	bne.n	800334c <HAL_I2C_Init+0x1bc>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1e58      	subs	r0, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6859      	ldr	r1, [r3, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	440b      	add	r3, r1
 800333c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003340:	3301      	adds	r3, #1
 8003342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334a:	e00f      	b.n	800336c <HAL_I2C_Init+0x1dc>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	0099      	lsls	r1, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003362:	3301      	adds	r3, #1
 8003364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	6809      	ldr	r1, [r1, #0]
 8003370:	4313      	orrs	r3, r2
 8003372:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69da      	ldr	r2, [r3, #28]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800339a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6911      	ldr	r1, [r2, #16]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	68d2      	ldr	r2, [r2, #12]
 80033a6:	4311      	orrs	r1, r2
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	000186a0 	.word	0x000186a0
 8003408:	001e847f 	.word	0x001e847f
 800340c:	003d08ff 	.word	0x003d08ff
 8003410:	431bde83 	.word	0x431bde83
 8003414:	10624dd3 	.word	0x10624dd3

08003418 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	817b      	strh	r3, [r7, #10]
 800342a:	460b      	mov	r3, r1
 800342c:	813b      	strh	r3, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003432:	f7ff fb23 	bl	8002a7c <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b20      	cmp	r3, #32
 8003442:	f040 80d9 	bne.w	80035f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2319      	movs	r3, #25
 800344c:	2201      	movs	r2, #1
 800344e:	496d      	ldr	r1, [pc, #436]	; (8003604 <HAL_I2C_Mem_Write+0x1ec>)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fdad 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
 800345e:	e0cc      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_I2C_Mem_Write+0x56>
 800346a:	2302      	movs	r3, #2
 800346c:	e0c5      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d007      	beq.n	8003494 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2221      	movs	r2, #33	; 0x21
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a3a      	ldr	r2, [r7, #32]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a4d      	ldr	r2, [pc, #308]	; (8003608 <HAL_I2C_Mem_Write+0x1f0>)
 80034d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d6:	88f8      	ldrh	r0, [r7, #6]
 80034d8:	893a      	ldrh	r2, [r7, #8]
 80034da:	8979      	ldrh	r1, [r7, #10]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4603      	mov	r3, r0
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fbe4 	bl	8003cb4 <I2C_RequestMemoryWrite>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d052      	beq.n	8003598 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e081      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 fe2e 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b04      	cmp	r3, #4
 800350c:	d107      	bne.n	800351e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e06b      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b04      	cmp	r3, #4
 800355e:	d11b      	bne.n	8003598 <HAL_I2C_Mem_Write+0x180>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d017      	beq.n	8003598 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1aa      	bne.n	80034f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fe1a 	bl	80041de <I2C_WaitOnBTFFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d107      	bne.n	80035c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e016      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	00100002 	.word	0x00100002
 8003608:	ffff0000 	.word	0xffff0000

0800360c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	; 0x30
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	4608      	mov	r0, r1
 8003616:	4611      	mov	r1, r2
 8003618:	461a      	mov	r2, r3
 800361a:	4603      	mov	r3, r0
 800361c:	817b      	strh	r3, [r7, #10]
 800361e:	460b      	mov	r3, r1
 8003620:	813b      	strh	r3, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003626:	f7ff fa29 	bl	8002a7c <HAL_GetTick>
 800362a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b20      	cmp	r3, #32
 8003636:	f040 8208 	bne.w	8003a4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2319      	movs	r3, #25
 8003640:	2201      	movs	r2, #1
 8003642:	497b      	ldr	r1, [pc, #492]	; (8003830 <HAL_I2C_Mem_Read+0x224>)
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fcb3 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
 8003652:	e1fb      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_I2C_Mem_Read+0x56>
 800365e:	2302      	movs	r3, #2
 8003660:	e1f4      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b01      	cmp	r3, #1
 8003676:	d007      	beq.n	8003688 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2222      	movs	r2, #34	; 0x22
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a5b      	ldr	r2, [pc, #364]	; (8003834 <HAL_I2C_Mem_Read+0x228>)
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ca:	88f8      	ldrh	r0, [r7, #6]
 80036cc:	893a      	ldrh	r2, [r7, #8]
 80036ce:	8979      	ldrh	r1, [r7, #10]
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4603      	mov	r3, r0
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fb80 	bl	8003de0 <I2C_RequestMemoryRead>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1b0      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d113      	bne.n	800371a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e184      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	2b01      	cmp	r3, #1
 8003720:	d11b      	bne.n	800375a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e164      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	2b02      	cmp	r3, #2
 8003760:	d11b      	bne.n	800379a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003770:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	e144      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037b0:	e138      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	f200 80f1 	bhi.w	800399e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d123      	bne.n	800380c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fd49 	bl	8004260 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e139      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a
 800380a:	e10b      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	2b02      	cmp	r3, #2
 8003812:	d14e      	bne.n	80038b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	2200      	movs	r2, #0
 800381c:	4906      	ldr	r1, [pc, #24]	; (8003838 <HAL_I2C_Mem_Read+0x22c>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fbc6 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e10e      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
 800382e:	bf00      	nop
 8003830:	00100002 	.word	0x00100002
 8003834:	ffff0000 	.word	0xffff0000
 8003838:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038b0:	e0b8      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	2200      	movs	r2, #0
 80038ba:	4966      	ldr	r1, [pc, #408]	; (8003a54 <HAL_I2C_Mem_Read+0x448>)
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fb77 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0bf      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	2200      	movs	r2, #0
 8003916:	494f      	ldr	r1, [pc, #316]	; (8003a54 <HAL_I2C_Mem_Read+0x448>)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fb49 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e091      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800399c:	e042      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fc5c 	bl	8004260 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e04c      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d118      	bne.n	8003a24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f47f aec2 	bne.w	80037b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e000      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a4a:	2302      	movs	r3, #2
  }
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3728      	adds	r7, #40	; 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	00010004 	.word	0x00010004

08003a58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	460b      	mov	r3, r1
 8003a66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a68:	f7ff f808 	bl	8002a7c <HAL_GetTick>
 8003a6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	f040 8111 	bne.w	8003ca2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2319      	movs	r3, #25
 8003a86:	2201      	movs	r2, #1
 8003a88:	4988      	ldr	r1, [pc, #544]	; (8003cac <HAL_I2C_IsDeviceReady+0x254>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fa90 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
 8003a98:	e104      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_I2C_IsDeviceReady+0x50>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0fd      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d007      	beq.n	8003ace <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2224      	movs	r2, #36	; 0x24
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a70      	ldr	r2, [pc, #448]	; (8003cb0 <HAL_I2C_IsDeviceReady+0x258>)
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fa4e 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b28:	d103      	bne.n	8003b32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0b6      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fe ff99 	bl	8002a7c <HAL_GetTick>
 8003b4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	bf0c      	ite	eq
 8003b5a:	2301      	moveq	r3, #1
 8003b5c:	2300      	movne	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b7a:	e025      	b.n	8003bc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fe ff7e 	bl	8002a7c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <HAL_I2C_IsDeviceReady+0x13a>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	22a0      	movs	r2, #160	; 0xa0
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2ba0      	cmp	r3, #160	; 0xa0
 8003bd2:	d005      	beq.n	8003be0 <HAL_I2C_IsDeviceReady+0x188>
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <HAL_I2C_IsDeviceReady+0x188>
 8003bda:	7dbb      	ldrb	r3, [r7, #22]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0cd      	beq.n	8003b7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d129      	bne.n	8003c4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2319      	movs	r3, #25
 8003c22:	2201      	movs	r2, #1
 8003c24:	4921      	ldr	r1, [pc, #132]	; (8003cac <HAL_I2C_IsDeviceReady+0x254>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f9c2 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e036      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e02c      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2319      	movs	r3, #25
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	490f      	ldr	r1, [pc, #60]	; (8003cac <HAL_I2C_IsDeviceReady+0x254>)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f99e 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e012      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	f4ff af32 	bcc.w	8003af2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	00100002 	.word	0x00100002
 8003cb0:	ffff0000 	.word	0xffff0000

08003cb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	4608      	mov	r0, r1
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	817b      	strh	r3, [r7, #10]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	813b      	strh	r3, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f960 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d04:	d103      	bne.n	8003d0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e05f      	b.n	8003dd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	492d      	ldr	r1, [pc, #180]	; (8003ddc <I2C_RequestMemoryWrite+0x128>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f998 	bl	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e04c      	b.n	8003dd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	6a39      	ldr	r1, [r7, #32]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fa02 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00d      	beq.n	8003d7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d107      	bne.n	8003d76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e02b      	b.n	8003dd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d80:	893b      	ldrh	r3, [r7, #8]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e021      	b.n	8003dd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d8c:	893b      	ldrh	r3, [r7, #8]
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9c:	6a39      	ldr	r1, [r7, #32]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f9dc 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d107      	bne.n	8003dc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e005      	b.n	8003dd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	00010002 	.word	0x00010002

08003de0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b088      	sub	sp, #32
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	4608      	mov	r0, r1
 8003dea:	4611      	mov	r1, r2
 8003dec:	461a      	mov	r2, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	817b      	strh	r3, [r7, #10]
 8003df2:	460b      	mov	r3, r1
 8003df4:	813b      	strh	r3, [r7, #8]
 8003df6:	4613      	mov	r3, r2
 8003df8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f8c2 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e40:	d103      	bne.n	8003e4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e0aa      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	6a3a      	ldr	r2, [r7, #32]
 8003e62:	4952      	ldr	r1, [pc, #328]	; (8003fac <I2C_RequestMemoryRead+0x1cc>)
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f8fa 	bl	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e097      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8c:	6a39      	ldr	r1, [r7, #32]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f964 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d107      	bne.n	8003eb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e076      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	611a      	str	r2, [r3, #16]
 8003ec6:	e021      	b.n	8003f0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	0a1b      	lsrs	r3, r3, #8
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	6a39      	ldr	r1, [r7, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 f93e 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00d      	beq.n	8003f02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d107      	bne.n	8003efe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e050      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	6a39      	ldr	r1, [r7, #32]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f923 	bl	800415c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d107      	bne.n	8003f34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e035      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f82b 	bl	8003fb0 <I2C_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6e:	d103      	bne.n	8003f78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e013      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f7c:	897b      	ldrh	r3, [r7, #10]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	6a3a      	ldr	r2, [r7, #32]
 8003f90:	4906      	ldr	r1, [pc, #24]	; (8003fac <I2C_RequestMemoryRead+0x1cc>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f863 	bl	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3718      	adds	r7, #24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00010002 	.word	0x00010002

08003fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fc0:	e025      	b.n	800400e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d021      	beq.n	800400e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fca:	f7fe fd57 	bl	8002a7c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d302      	bcc.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d116      	bne.n	800400e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f043 0220 	orr.w	r2, r3, #32
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e023      	b.n	8004056 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d10d      	bne.n	8004034 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	e00c      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	43da      	mvns	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4013      	ands	r3, r2
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf0c      	ite	eq
 8004046:	2301      	moveq	r3, #1
 8004048:	2300      	movne	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	429a      	cmp	r2, r3
 8004052:	d0b6      	beq.n	8003fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b084      	sub	sp, #16
 8004062:	af00      	add	r7, sp, #0
 8004064:	60f8      	str	r0, [r7, #12]
 8004066:	60b9      	str	r1, [r7, #8]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800406c:	e051      	b.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407c:	d123      	bne.n	80040c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004096:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e046      	b.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d021      	beq.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe fcd5 	bl	8002a7c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d116      	bne.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e020      	b.n	8004154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10c      	bne.n	8004136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	43da      	mvns	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	e00b      	b.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	43da      	mvns	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4013      	ands	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d18d      	bne.n	800406e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004168:	e02d      	b.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f8ce 	bl	800430c <I2C_IsAcknowledgeFailed>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e02d      	b.n	80041d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d021      	beq.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004182:	f7fe fc7b 	bl	8002a7c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d116      	bne.n	80041c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f043 0220 	orr.w	r2, r3, #32
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e007      	b.n	80041d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d0:	2b80      	cmp	r3, #128	; 0x80
 80041d2:	d1ca      	bne.n	800416a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ea:	e02d      	b.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f88d 	bl	800430c <I2C_IsAcknowledgeFailed>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e02d      	b.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004202:	d021      	beq.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004204:	f7fe fc3a 	bl	8002a7c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d116      	bne.n	8004248 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e007      	b.n	8004258 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d1ca      	bne.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800426c:	e042      	b.n	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b10      	cmp	r3, #16
 800427a:	d119      	bne.n	80042b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0210 	mvn.w	r2, #16
 8004284:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e029      	b.n	8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b0:	f7fe fbe4 	bl	8002a7c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d302      	bcc.n	80042c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d116      	bne.n	80042f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e007      	b.n	8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d1b5      	bne.n	800426e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d11b      	bne.n	800435c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800432c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f043 0204 	orr.w	r2, r3, #4
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e264      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d075      	beq.n	8004476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800438a:	4ba3      	ldr	r3, [pc, #652]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b04      	cmp	r3, #4
 8004394:	d00c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004396:	4ba0      	ldr	r3, [pc, #640]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d112      	bne.n	80043c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a2:	4b9d      	ldr	r3, [pc, #628]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ae:	d10b      	bne.n	80043c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	4b99      	ldr	r3, [pc, #612]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d05b      	beq.n	8004474 <HAL_RCC_OscConfig+0x108>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d157      	bne.n	8004474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e23f      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d106      	bne.n	80043e0 <HAL_RCC_OscConfig+0x74>
 80043d2:	4b91      	ldr	r3, [pc, #580]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a90      	ldr	r2, [pc, #576]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	e01d      	b.n	800441c <HAL_RCC_OscConfig+0xb0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043e8:	d10c      	bne.n	8004404 <HAL_RCC_OscConfig+0x98>
 80043ea:	4b8b      	ldr	r3, [pc, #556]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a8a      	ldr	r2, [pc, #552]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4b88      	ldr	r3, [pc, #544]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a87      	ldr	r2, [pc, #540]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e00b      	b.n	800441c <HAL_RCC_OscConfig+0xb0>
 8004404:	4b84      	ldr	r3, [pc, #528]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a83      	ldr	r2, [pc, #524]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 800440a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	4b81      	ldr	r3, [pc, #516]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a80      	ldr	r2, [pc, #512]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d013      	beq.n	800444c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fe fb2a 	bl	8002a7c <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800442c:	f7fe fb26 	bl	8002a7c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e204      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443e:	4b76      	ldr	r3, [pc, #472]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0xc0>
 800444a:	e014      	b.n	8004476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fe fb16 	bl	8002a7c <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fe fb12 	bl	8002a7c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1f0      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	4b6c      	ldr	r3, [pc, #432]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0xe8>
 8004472:	e000      	b.n	8004476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d063      	beq.n	800454a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004482:	4b65      	ldr	r3, [pc, #404]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	f003 030c 	and.w	r3, r3, #12
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800448e:	4b62      	ldr	r3, [pc, #392]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004496:	2b08      	cmp	r3, #8
 8004498:	d11c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449a:	4b5f      	ldr	r3, [pc, #380]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d116      	bne.n	80044d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	4b5c      	ldr	r3, [pc, #368]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_RCC_OscConfig+0x152>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d001      	beq.n	80044be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e1c4      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044be:	4b56      	ldr	r3, [pc, #344]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4952      	ldr	r1, [pc, #328]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	e03a      	b.n	800454a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044dc:	4b4f      	ldr	r3, [pc, #316]	; (800461c <HAL_RCC_OscConfig+0x2b0>)
 80044de:	2201      	movs	r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fe facb 	bl	8002a7c <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ea:	f7fe fac7 	bl	8002a7c <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e1a5      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fc:	4b46      	ldr	r3, [pc, #280]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004508:	4b43      	ldr	r3, [pc, #268]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4940      	ldr	r1, [pc, #256]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
 800451c:	e015      	b.n	800454a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_RCC_OscConfig+0x2b0>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fe faaa 	bl	8002a7c <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452c:	f7fe faa6 	bl	8002a7c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e184      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d030      	beq.n	80045b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d016      	beq.n	800458c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <HAL_RCC_OscConfig+0x2b4>)
 8004560:	2201      	movs	r2, #1
 8004562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fe fa8a 	bl	8002a7c <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456c:	f7fe fa86 	bl	8002a7c <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e164      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800457e:	4b26      	ldr	r3, [pc, #152]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 8004580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCC_OscConfig+0x200>
 800458a:	e015      	b.n	80045b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458c:	4b24      	ldr	r3, [pc, #144]	; (8004620 <HAL_RCC_OscConfig+0x2b4>)
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004592:	f7fe fa73 	bl	8002a7c <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800459a:	f7fe fa6f 	bl	8002a7c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e14d      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f0      	bne.n	800459a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80a0 	beq.w	8004706 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ca:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	4a0e      	ldr	r2, [pc, #56]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6413      	str	r3, [r2, #64]	; 0x40
 80045e6:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f2:	2301      	movs	r3, #1
 80045f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_OscConfig+0x2b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d121      	bne.n	8004646 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <HAL_RCC_OscConfig+0x2b8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a07      	ldr	r2, [pc, #28]	; (8004624 <HAL_RCC_OscConfig+0x2b8>)
 8004608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800460c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460e:	f7fe fa35 	bl	8002a7c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	e011      	b.n	800463a <HAL_RCC_OscConfig+0x2ce>
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	42470000 	.word	0x42470000
 8004620:	42470e80 	.word	0x42470e80
 8004624:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004628:	f7fe fa28 	bl	8002a7c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e106      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b85      	ldr	r3, [pc, #532]	; (8004850 <HAL_RCC_OscConfig+0x4e4>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d106      	bne.n	800465c <HAL_RCC_OscConfig+0x2f0>
 800464e:	4b81      	ldr	r3, [pc, #516]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a80      	ldr	r2, [pc, #512]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	e01c      	b.n	8004696 <HAL_RCC_OscConfig+0x32a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b05      	cmp	r3, #5
 8004662:	d10c      	bne.n	800467e <HAL_RCC_OscConfig+0x312>
 8004664:	4b7b      	ldr	r3, [pc, #492]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a7a      	ldr	r2, [pc, #488]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 800466a:	f043 0304 	orr.w	r3, r3, #4
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	4b78      	ldr	r3, [pc, #480]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a77      	ldr	r2, [pc, #476]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
 800467c:	e00b      	b.n	8004696 <HAL_RCC_OscConfig+0x32a>
 800467e:	4b75      	ldr	r3, [pc, #468]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a74      	ldr	r2, [pc, #464]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
 800468a:	4b72      	ldr	r3, [pc, #456]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a71      	ldr	r2, [pc, #452]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004690:	f023 0304 	bic.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d015      	beq.n	80046ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469e:	f7fe f9ed 	bl	8002a7c <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a4:	e00a      	b.n	80046bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a6:	f7fe f9e9 	bl	8002a7c <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e0c5      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046bc:	4b65      	ldr	r3, [pc, #404]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0ee      	beq.n	80046a6 <HAL_RCC_OscConfig+0x33a>
 80046c8:	e014      	b.n	80046f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ca:	f7fe f9d7 	bl	8002a7c <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fe f9d3 	bl	8002a7c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e0af      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e8:	4b5a      	ldr	r3, [pc, #360]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1ee      	bne.n	80046d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d105      	bne.n	8004706 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046fa:	4b56      	ldr	r3, [pc, #344]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	4a55      	ldr	r2, [pc, #340]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004704:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 809b 	beq.w	8004846 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004710:	4b50      	ldr	r3, [pc, #320]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b08      	cmp	r3, #8
 800471a:	d05c      	beq.n	80047d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d141      	bne.n	80047a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004724:	4b4c      	ldr	r3, [pc, #304]	; (8004858 <HAL_RCC_OscConfig+0x4ec>)
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472a:	f7fe f9a7 	bl	8002a7c <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004732:	f7fe f9a3 	bl	8002a7c <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e081      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004744:	4b43      	ldr	r3, [pc, #268]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f0      	bne.n	8004732 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	019b      	lsls	r3, r3, #6
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	3b01      	subs	r3, #1
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	061b      	lsls	r3, r3, #24
 8004774:	4937      	ldr	r1, [pc, #220]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 8004776:	4313      	orrs	r3, r2
 8004778:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800477a:	4b37      	ldr	r3, [pc, #220]	; (8004858 <HAL_RCC_OscConfig+0x4ec>)
 800477c:	2201      	movs	r2, #1
 800477e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004780:	f7fe f97c 	bl	8002a7c <HAL_GetTick>
 8004784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004788:	f7fe f978 	bl	8002a7c <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e056      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479a:	4b2e      	ldr	r3, [pc, #184]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0x41c>
 80047a6:	e04e      	b.n	8004846 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	4b2b      	ldr	r3, [pc, #172]	; (8004858 <HAL_RCC_OscConfig+0x4ec>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fe f965 	bl	8002a7c <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fe f961 	bl	8002a7c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e03f      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c8:	4b22      	ldr	r3, [pc, #136]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCC_OscConfig+0x44a>
 80047d4:	e037      	b.n	8004846 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e032      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047e2:	4b1c      	ldr	r3, [pc, #112]	; (8004854 <HAL_RCC_OscConfig+0x4e8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d028      	beq.n	8004842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d121      	bne.n	8004842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d11a      	bne.n	8004842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004812:	4013      	ands	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004818:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800481a:	4293      	cmp	r3, r2
 800481c:	d111      	bne.n	8004842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	3b01      	subs	r3, #1
 800482c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d107      	bne.n	8004842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40007000 	.word	0x40007000
 8004854:	40023800 	.word	0x40023800
 8004858:	42470060 	.word	0x42470060

0800485c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0cc      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004870:	4b68      	ldr	r3, [pc, #416]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d90c      	bls.n	8004898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b63      	ldr	r3, [pc, #396]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0b8      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d020      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048b0:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	4a58      	ldr	r2, [pc, #352]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c8:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d4:	4b50      	ldr	r3, [pc, #320]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	494d      	ldr	r1, [pc, #308]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d044      	beq.n	800497c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d107      	bne.n	800490a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	4b47      	ldr	r3, [pc, #284]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d119      	bne.n	800493a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e07f      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d003      	beq.n	800491a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004916:	2b03      	cmp	r3, #3
 8004918:	d107      	bne.n	800492a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491a:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d109      	bne.n	800493a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e06f      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492a:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e067      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493a:	4b37      	ldr	r3, [pc, #220]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 0203 	bic.w	r2, r3, #3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4934      	ldr	r1, [pc, #208]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800494c:	f7fe f896 	bl	8002a7c <HAL_GetTick>
 8004950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	e00a      	b.n	800496a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004954:	f7fe f892 	bl	8002a7c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e04f      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	4b2b      	ldr	r3, [pc, #172]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 020c 	and.w	r2, r3, #12
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	429a      	cmp	r2, r3
 800497a:	d1eb      	bne.n	8004954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800497c:	4b25      	ldr	r3, [pc, #148]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d20c      	bcs.n	80049a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800498a:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <HAL_RCC_ClockConfig+0x1b8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	429a      	cmp	r2, r3
 800499e:	d001      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e032      	b.n	8004a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049b0:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4916      	ldr	r1, [pc, #88]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ce:	4b12      	ldr	r3, [pc, #72]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	490e      	ldr	r1, [pc, #56]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049e2:	f000 f821 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
 80049e6:	4602      	mov	r2, r0
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	490a      	ldr	r1, [pc, #40]	; (8004a1c <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	5ccb      	ldrb	r3, [r1, r3]
 80049f6:	fa22 f303 	lsr.w	r3, r2, r3
 80049fa:	4a09      	ldr	r2, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1c4>)
 80049fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049fe:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <HAL_RCC_ClockConfig+0x1c8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd fff6 	bl	80029f4 <HAL_InitTick>

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40023c00 	.word	0x40023c00
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	08009fd8 	.word	0x08009fd8
 8004a20:	2000001c 	.word	0x2000001c
 8004a24:	20000020 	.word	0x20000020

08004a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	607b      	str	r3, [r7, #4]
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	2300      	movs	r3, #0
 8004a3a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a40:	4b67      	ldr	r3, [pc, #412]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 030c 	and.w	r3, r3, #12
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d00d      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x40>
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	f200 80bd 	bhi.w	8004bcc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x34>
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d003      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a5a:	e0b7      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b61      	ldr	r3, [pc, #388]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a5e:	60bb      	str	r3, [r7, #8]
       break;
 8004a60:	e0b7      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a62:	4b61      	ldr	r3, [pc, #388]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a64:	60bb      	str	r3, [r7, #8]
      break;
 8004a66:	e0b4      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a68:	4b5d      	ldr	r3, [pc, #372]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a72:	4b5b      	ldr	r3, [pc, #364]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d04d      	beq.n	8004b1a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7e:	4b58      	ldr	r3, [pc, #352]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	461a      	mov	r2, r3
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	ea02 0800 	and.w	r8, r2, r0
 8004a96:	ea03 0901 	and.w	r9, r3, r1
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	014b      	lsls	r3, r1, #5
 8004aa8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004aac:	0142      	lsls	r2, r0, #5
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	ebb0 0008 	subs.w	r0, r0, r8
 8004ab6:	eb61 0109 	sbc.w	r1, r1, r9
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	018b      	lsls	r3, r1, #6
 8004ac4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ac8:	0182      	lsls	r2, r0, #6
 8004aca:	1a12      	subs	r2, r2, r0
 8004acc:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad0:	f04f 0000 	mov.w	r0, #0
 8004ad4:	f04f 0100 	mov.w	r1, #0
 8004ad8:	00d9      	lsls	r1, r3, #3
 8004ada:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ade:	00d0      	lsls	r0, r2, #3
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	eb12 0208 	adds.w	r2, r2, r8
 8004ae8:	eb43 0309 	adc.w	r3, r3, r9
 8004aec:	f04f 0000 	mov.w	r0, #0
 8004af0:	f04f 0100 	mov.w	r1, #0
 8004af4:	0259      	lsls	r1, r3, #9
 8004af6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004afa:	0250      	lsls	r0, r2, #9
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	f7fb fb5c 	bl	80001c8 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4613      	mov	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	e04a      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1a:	4b31      	ldr	r3, [pc, #196]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	099b      	lsrs	r3, r3, #6
 8004b20:	461a      	mov	r2, r3
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b2a:	f04f 0100 	mov.w	r1, #0
 8004b2e:	ea02 0400 	and.w	r4, r2, r0
 8004b32:	ea03 0501 	and.w	r5, r3, r1
 8004b36:	4620      	mov	r0, r4
 8004b38:	4629      	mov	r1, r5
 8004b3a:	f04f 0200 	mov.w	r2, #0
 8004b3e:	f04f 0300 	mov.w	r3, #0
 8004b42:	014b      	lsls	r3, r1, #5
 8004b44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b48:	0142      	lsls	r2, r0, #5
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	1b00      	subs	r0, r0, r4
 8004b50:	eb61 0105 	sbc.w	r1, r1, r5
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	018b      	lsls	r3, r1, #6
 8004b5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b62:	0182      	lsls	r2, r0, #6
 8004b64:	1a12      	subs	r2, r2, r0
 8004b66:	eb63 0301 	sbc.w	r3, r3, r1
 8004b6a:	f04f 0000 	mov.w	r0, #0
 8004b6e:	f04f 0100 	mov.w	r1, #0
 8004b72:	00d9      	lsls	r1, r3, #3
 8004b74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b78:	00d0      	lsls	r0, r2, #3
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	1912      	adds	r2, r2, r4
 8004b80:	eb45 0303 	adc.w	r3, r5, r3
 8004b84:	f04f 0000 	mov.w	r0, #0
 8004b88:	f04f 0100 	mov.w	r1, #0
 8004b8c:	0299      	lsls	r1, r3, #10
 8004b8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b92:	0290      	lsls	r0, r2, #10
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	f7fb fb10 	bl	80001c8 <__aeabi_uldivmod>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4613      	mov	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bb0:	4b0b      	ldr	r3, [pc, #44]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	3301      	adds	r3, #1
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	60bb      	str	r3, [r7, #8]
      break;
 8004bca:	e002      	b.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bcc:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bce:	60bb      	str	r3, [r7, #8]
      break;
 8004bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bde:	bf00      	nop
 8004be0:	40023800 	.word	0x40023800
 8004be4:	00f42400 	.word	0x00f42400
 8004be8:	007a1200 	.word	0x007a1200

08004bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	2000001c 	.word	0x2000001c

08004c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c08:	f7ff fff0 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	0a9b      	lsrs	r3, r3, #10
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	4903      	ldr	r1, [pc, #12]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1a:	5ccb      	ldrb	r3, [r1, r3]
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40023800 	.word	0x40023800
 8004c28:	08009fe8 	.word	0x08009fe8

08004c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c30:	f7ff ffdc 	bl	8004bec <HAL_RCC_GetHCLKFreq>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	0b5b      	lsrs	r3, r3, #13
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4903      	ldr	r1, [pc, #12]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c42:	5ccb      	ldrb	r3, [r1, r3]
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	08009fe8 	.word	0x08009fe8

08004c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e07b      	b.n	8004d5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c76:	d009      	beq.n	8004c8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	61da      	str	r2, [r3, #28]
 8004c7e:	e005      	b.n	8004c8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd fc42 	bl	8002530 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	ea42 0103 	orr.w	r1, r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	0c1b      	lsrs	r3, r3, #16
 8004d2a:	f003 0104 	and.w	r1, r3, #4
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	f003 0210 	and.w	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b088      	sub	sp, #32
 8004d6a:	af02      	add	r7, sp, #8
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4613      	mov	r3, r2
 8004d74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d82:	d112      	bne.n	8004daa <HAL_SPI_Receive+0x44>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10e      	bne.n	8004daa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d94:	88fa      	ldrh	r2, [r7, #6]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f8f1 	bl	8004f88 <HAL_SPI_TransmitReceive>
 8004da6:	4603      	mov	r3, r0
 8004da8:	e0ea      	b.n	8004f80 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_SPI_Receive+0x52>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e0e3      	b.n	8004f80 <HAL_SPI_Receive+0x21a>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dc0:	f7fd fe5c 	bl	8002a7c <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d002      	beq.n	8004dd8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dd6:	e0ca      	b.n	8004f6e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_SPI_Receive+0x7e>
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d102      	bne.n	8004dea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004de8:	e0c1      	b.n	8004f6e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2204      	movs	r2, #4
 8004dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	88fa      	ldrh	r2, [r7, #6]
 8004e02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	88fa      	ldrh	r2, [r7, #6]
 8004e08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e30:	d10f      	bne.n	8004e52 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d007      	beq.n	8004e70 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d162      	bne.n	8004f3e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e78:	e02e      	b.n	8004ed8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d115      	bne.n	8004eb4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f103 020c 	add.w	r2, r3, #12
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	7812      	ldrb	r2, [r2, #0]
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eb2:	e011      	b.n	8004ed8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eb4:	f7fd fde2 	bl	8002a7c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d803      	bhi.n	8004ecc <HAL_SPI_Receive+0x166>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eca:	d102      	bne.n	8004ed2 <HAL_SPI_Receive+0x16c>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ed6:	e04a      	b.n	8004f6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1cb      	bne.n	8004e7a <HAL_SPI_Receive+0x114>
 8004ee2:	e031      	b.n	8004f48 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d113      	bne.n	8004f1a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	b292      	uxth	r2, r2
 8004efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	1c9a      	adds	r2, r3, #2
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	3b01      	subs	r3, #1
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f18:	e011      	b.n	8004f3e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f1a:	f7fd fdaf 	bl	8002a7c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d803      	bhi.n	8004f32 <HAL_SPI_Receive+0x1cc>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d102      	bne.n	8004f38 <HAL_SPI_Receive+0x1d2>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d102      	bne.n	8004f3e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004f3c:	e017      	b.n	8004f6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1cd      	bne.n	8004ee4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 fa45 	bl	80053dc <SPI_EndRxTransaction>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	75fb      	strb	r3, [r7, #23]
 8004f6a:	e000      	b.n	8004f6e <HAL_SPI_Receive+0x208>
  }

error :
 8004f6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08c      	sub	sp, #48	; 0x30
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f96:	2301      	movs	r3, #1
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x26>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e18a      	b.n	80052c4 <HAL_SPI_TransmitReceive+0x33c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fb6:	f7fd fd61 	bl	8002a7c <HAL_GetTick>
 8004fba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fcc:	887b      	ldrh	r3, [r7, #2]
 8004fce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d00f      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x70>
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fde:	d107      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d103      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x68>
 8004fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d003      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ff6:	e15b      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_SPI_TransmitReceive+0x82>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_SPI_TransmitReceive+0x82>
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005010:	e14e      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b04      	cmp	r3, #4
 800501c:	d003      	beq.n	8005026 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2205      	movs	r2, #5
 8005022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	887a      	ldrh	r2, [r7, #2]
 8005036:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	887a      	ldrh	r2, [r7, #2]
 800503c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	887a      	ldrh	r2, [r7, #2]
 8005048:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	887a      	ldrh	r2, [r7, #2]
 800504e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d007      	beq.n	800507a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005078:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005082:	d178      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_SPI_TransmitReceive+0x10a>
 800508c:	8b7b      	ldrh	r3, [r7, #26]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d166      	bne.n	8005160 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	881a      	ldrh	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	1c9a      	adds	r2, r3, #2
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050b6:	e053      	b.n	8005160 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d11b      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x176>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d016      	beq.n	80050fe <HAL_SPI_TransmitReceive+0x176>
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d113      	bne.n	80050fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	881a      	ldrh	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	1c9a      	adds	r2, r3, #2
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b01      	cmp	r3, #1
 800510a:	d119      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x1b8>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d014      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	b292      	uxth	r2, r2
 8005122:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800513c:	2301      	movs	r3, #1
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005140:	f7fd fc9c 	bl	8002a7c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800514c:	429a      	cmp	r2, r3
 800514e:	d807      	bhi.n	8005160 <HAL_SPI_TransmitReceive+0x1d8>
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d003      	beq.n	8005160 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800515e:	e0a7      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1a6      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x130>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1a1      	bne.n	80050b8 <HAL_SPI_TransmitReceive+0x130>
 8005174:	e07c      	b.n	8005270 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <HAL_SPI_TransmitReceive+0x1fc>
 800517e:	8b7b      	ldrh	r3, [r7, #26]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d16b      	bne.n	800525c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	330c      	adds	r3, #12
 800518e:	7812      	ldrb	r2, [r2, #0]
 8005190:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051aa:	e057      	b.n	800525c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d11c      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x26c>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d017      	beq.n	80051f4 <HAL_SPI_TransmitReceive+0x26c>
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d114      	bne.n	80051f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	330c      	adds	r3, #12
 80051d4:	7812      	ldrb	r2, [r2, #0]
 80051d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b01      	subs	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d119      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x2ae>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d014      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005232:	2301      	movs	r3, #1
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005236:	f7fd fc21 	bl	8002a7c <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005242:	429a      	cmp	r2, r3
 8005244:	d803      	bhi.n	800524e <HAL_SPI_TransmitReceive+0x2c6>
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d102      	bne.n	8005254 <HAL_SPI_TransmitReceive+0x2cc>
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d103      	bne.n	800525c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800525a:	e029      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1a2      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x224>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d19d      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f917 	bl	80054a8 <SPI_EndRxTxTransaction>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800528c:	e010      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10b      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	e000      	b.n	80052b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3730      	adds	r7, #48	; 0x30
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052dc:	f7fd fbce 	bl	8002a7c <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	4413      	add	r3, r2
 80052ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052ec:	f7fd fbc6 	bl	8002a7c <HAL_GetTick>
 80052f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052f2:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	015b      	lsls	r3, r3, #5
 80052f8:	0d1b      	lsrs	r3, r3, #20
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005302:	e054      	b.n	80053ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d050      	beq.n	80053ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800530c:	f7fd fbb6 	bl	8002a7c <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	429a      	cmp	r2, r3
 800531a:	d902      	bls.n	8005322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d13d      	bne.n	800539e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533a:	d111      	bne.n	8005360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005344:	d004      	beq.n	8005350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800534e:	d107      	bne.n	8005360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800535e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005368:	d10f      	bne.n	800538a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e017      	b.n	80053ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d19b      	bne.n	8005304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2000001c 	.word	0x2000001c

080053dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f0:	d111      	bne.n	8005416 <SPI_EndRxTransaction+0x3a>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fa:	d004      	beq.n	8005406 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005404:	d107      	bne.n	8005416 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005414:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800541e:	d12a      	bne.n	8005476 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d012      	beq.n	8005450 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2200      	movs	r2, #0
 8005432:	2180      	movs	r1, #128	; 0x80
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f7ff ff49 	bl	80052cc <SPI_WaitFlagStateUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d02d      	beq.n	800549c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f043 0220 	orr.w	r2, r3, #32
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e026      	b.n	800549e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2200      	movs	r2, #0
 8005458:	2101      	movs	r1, #1
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f7ff ff36 	bl	80052cc <SPI_WaitFlagStateUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01a      	beq.n	800549c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	f043 0220 	orr.w	r2, r3, #32
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e013      	b.n	800549e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2200      	movs	r2, #0
 800547e:	2101      	movs	r1, #1
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f7ff ff23 	bl	80052cc <SPI_WaitFlagStateUntilTimeout>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005490:	f043 0220 	orr.w	r2, r3, #32
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e000      	b.n	800549e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <SPI_EndRxTxTransaction+0x7c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <SPI_EndRxTxTransaction+0x80>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	0d5b      	lsrs	r3, r3, #21
 80054c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054c4:	fb02 f303 	mul.w	r3, r2, r3
 80054c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d2:	d112      	bne.n	80054fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2200      	movs	r2, #0
 80054dc:	2180      	movs	r1, #128	; 0x80
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff fef4 	bl	80052cc <SPI_WaitFlagStateUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d016      	beq.n	8005518 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	f043 0220 	orr.w	r2, r3, #32
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e00f      	b.n	800551a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00a      	beq.n	8005516 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	3b01      	subs	r3, #1
 8005504:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005510:	2b80      	cmp	r3, #128	; 0x80
 8005512:	d0f2      	beq.n	80054fa <SPI_EndRxTxTransaction+0x52>
 8005514:	e000      	b.n	8005518 <SPI_EndRxTxTransaction+0x70>
        break;
 8005516:	bf00      	nop
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	2000001c 	.word	0x2000001c
 8005528:	165e9f81 	.word	0x165e9f81

0800552c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e034      	b.n	80055ac <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7fb fbf0 	bl	8000d3c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3308      	adds	r3, #8
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f001 fc6e 	bl	8006e48 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6818      	ldr	r0, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	461a      	mov	r2, r3
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	f001 fcb8 	bl	8006eec <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6858      	ldr	r0, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	6879      	ldr	r1, [r7, #4]
 800558a:	f001 fced 	bl	8006f68 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	6892      	ldr	r2, [r2, #8]
 8005596:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	6892      	ldr	r2, [r2, #8]
 80055a2:	f041 0101 	orr.w	r1, r1, #1
 80055a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3710      	adds	r7, #16
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e041      	b.n	800564a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fd f8b4 	bl	8002748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f000 fa96 	bl	8005b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	d001      	beq.n	800566c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e04e      	b.n	800570a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a23      	ldr	r2, [pc, #140]	; (8005718 <HAL_TIM_Base_Start_IT+0xc4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d022      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005696:	d01d      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1f      	ldr	r2, [pc, #124]	; (800571c <HAL_TIM_Base_Start_IT+0xc8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d018      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1e      	ldr	r2, [pc, #120]	; (8005720 <HAL_TIM_Base_Start_IT+0xcc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1c      	ldr	r2, [pc, #112]	; (8005724 <HAL_TIM_Base_Start_IT+0xd0>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00e      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1b      	ldr	r2, [pc, #108]	; (8005728 <HAL_TIM_Base_Start_IT+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d009      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a19      	ldr	r2, [pc, #100]	; (800572c <HAL_TIM_Base_Start_IT+0xd8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x80>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a18      	ldr	r2, [pc, #96]	; (8005730 <HAL_TIM_Base_Start_IT+0xdc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d111      	bne.n	80056f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b06      	cmp	r3, #6
 80056e4:	d010      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f6:	e007      	b.n	8005708 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40010400 	.word	0x40010400
 800572c:	40014000 	.word	0x40014000
 8005730:	40001800 	.word	0x40001800

08005734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b02      	cmp	r3, #2
 8005748:	d122      	bne.n	8005790 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b02      	cmp	r3, #2
 8005756:	d11b      	bne.n	8005790 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f06f 0202 	mvn.w	r2, #2
 8005760:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f9b5 	bl	8005ae6 <HAL_TIM_IC_CaptureCallback>
 800577c:	e005      	b.n	800578a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f9a7 	bl	8005ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f9b8 	bl	8005afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b04      	cmp	r3, #4
 800579c:	d122      	bne.n	80057e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d11b      	bne.n	80057e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f06f 0204 	mvn.w	r2, #4
 80057b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f98b 	bl	8005ae6 <HAL_TIM_IC_CaptureCallback>
 80057d0:	e005      	b.n	80057de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f97d 	bl	8005ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f98e 	bl	8005afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0308 	and.w	r3, r3, #8
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d122      	bne.n	8005838 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d11b      	bne.n	8005838 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0208 	mvn.w	r2, #8
 8005808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2204      	movs	r2, #4
 800580e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f961 	bl	8005ae6 <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f953 	bl	8005ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f964 	bl	8005afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b10      	cmp	r3, #16
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b10      	cmp	r3, #16
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0210 	mvn.w	r2, #16
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2208      	movs	r2, #8
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f937 	bl	8005ae6 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f929 	bl	8005ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f93a 	bl	8005afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b01      	cmp	r3, #1
 8005898:	d10e      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d107      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0201 	mvn.w	r2, #1
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7fc fde8 	bl	8002488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b80      	cmp	r3, #128	; 0x80
 80058c4:	d10e      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d0:	2b80      	cmp	r3, #128	; 0x80
 80058d2:	d107      	bne.n	80058e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fae0 	bl	8005ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d10e      	bne.n	8005910 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d107      	bne.n	8005910 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8ff 	bl	8005b0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b20      	cmp	r3, #32
 800591c:	d10e      	bne.n	800593c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b20      	cmp	r3, #32
 800592a:	d107      	bne.n	800593c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f06f 0220 	mvn.w	r2, #32
 8005934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 faaa 	bl	8005e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIM_ConfigClockSource+0x1c>
 800595c:	2302      	movs	r3, #2
 800595e:	e0b4      	b.n	8005aca <HAL_TIM_ConfigClockSource+0x186>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800597e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005998:	d03e      	beq.n	8005a18 <HAL_TIM_ConfigClockSource+0xd4>
 800599a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800599e:	f200 8087 	bhi.w	8005ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80059a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a6:	f000 8086 	beq.w	8005ab6 <HAL_TIM_ConfigClockSource+0x172>
 80059aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ae:	d87f      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b70      	cmp	r3, #112	; 0x70
 80059b2:	d01a      	beq.n	80059ea <HAL_TIM_ConfigClockSource+0xa6>
 80059b4:	2b70      	cmp	r3, #112	; 0x70
 80059b6:	d87b      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b60      	cmp	r3, #96	; 0x60
 80059ba:	d050      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x11a>
 80059bc:	2b60      	cmp	r3, #96	; 0x60
 80059be:	d877      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c0:	2b50      	cmp	r3, #80	; 0x50
 80059c2:	d03c      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0xfa>
 80059c4:	2b50      	cmp	r3, #80	; 0x50
 80059c6:	d873      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d058      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0x13a>
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d86f      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80059d0:	2b30      	cmp	r3, #48	; 0x30
 80059d2:	d064      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x15a>
 80059d4:	2b30      	cmp	r3, #48	; 0x30
 80059d6:	d86b      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80059d8:	2b20      	cmp	r3, #32
 80059da:	d060      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x15a>
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d867      	bhi.n	8005ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d05c      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x15a>
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d05a      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x15a>
 80059e8:	e062      	b.n	8005ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6899      	ldr	r1, [r3, #8]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f000 f9ad 	bl	8005d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	609a      	str	r2, [r3, #8]
      break;
 8005a16:	e04f      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f000 f996 	bl	8005d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a3a:	609a      	str	r2, [r3, #8]
      break;
 8005a3c:	e03c      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6859      	ldr	r1, [r3, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f000 f90a 	bl	8005c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2150      	movs	r1, #80	; 0x50
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 f963 	bl	8005d22 <TIM_ITRx_SetConfig>
      break;
 8005a5c:	e02c      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	6859      	ldr	r1, [r3, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f000 f929 	bl	8005cc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2160      	movs	r1, #96	; 0x60
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 f953 	bl	8005d22 <TIM_ITRx_SetConfig>
      break;
 8005a7c:	e01c      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 f8ea 	bl	8005c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2140      	movs	r1, #64	; 0x40
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 f943 	bl	8005d22 <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e00c      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	f000 f93a 	bl	8005d22 <TIM_ITRx_SetConfig>
      break;
 8005aae:	e003      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ab4:	e000      	b.n	8005ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b083      	sub	sp, #12
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a40      	ldr	r2, [pc, #256]	; (8005c38 <TIM_Base_SetConfig+0x114>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d013      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d00f      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3d      	ldr	r2, [pc, #244]	; (8005c3c <TIM_Base_SetConfig+0x118>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00b      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a3c      	ldr	r2, [pc, #240]	; (8005c40 <TIM_Base_SetConfig+0x11c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d007      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a3b      	ldr	r2, [pc, #236]	; (8005c44 <TIM_Base_SetConfig+0x120>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d003      	beq.n	8005b64 <TIM_Base_SetConfig+0x40>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a3a      	ldr	r2, [pc, #232]	; (8005c48 <TIM_Base_SetConfig+0x124>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d108      	bne.n	8005b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2f      	ldr	r2, [pc, #188]	; (8005c38 <TIM_Base_SetConfig+0x114>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d02b      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b84:	d027      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2c      	ldr	r2, [pc, #176]	; (8005c3c <TIM_Base_SetConfig+0x118>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d023      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a2b      	ldr	r2, [pc, #172]	; (8005c40 <TIM_Base_SetConfig+0x11c>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01f      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a2a      	ldr	r2, [pc, #168]	; (8005c44 <TIM_Base_SetConfig+0x120>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d01b      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a29      	ldr	r2, [pc, #164]	; (8005c48 <TIM_Base_SetConfig+0x124>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d017      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <TIM_Base_SetConfig+0x128>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d013      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <TIM_Base_SetConfig+0x12c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00f      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a26      	ldr	r2, [pc, #152]	; (8005c54 <TIM_Base_SetConfig+0x130>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00b      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a25      	ldr	r2, [pc, #148]	; (8005c58 <TIM_Base_SetConfig+0x134>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a24      	ldr	r2, [pc, #144]	; (8005c5c <TIM_Base_SetConfig+0x138>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d003      	beq.n	8005bd6 <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a23      	ldr	r2, [pc, #140]	; (8005c60 <TIM_Base_SetConfig+0x13c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d108      	bne.n	8005be8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <TIM_Base_SetConfig+0x114>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_Base_SetConfig+0xf8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a0c      	ldr	r2, [pc, #48]	; (8005c48 <TIM_Base_SetConfig+0x124>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d103      	bne.n	8005c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	615a      	str	r2, [r3, #20]
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40000400 	.word	0x40000400
 8005c40:	40000800 	.word	0x40000800
 8005c44:	40000c00 	.word	0x40000c00
 8005c48:	40010400 	.word	0x40010400
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800
 8005c58:	40001800 	.word	0x40001800
 8005c5c:	40001c00 	.word	0x40001c00
 8005c60:	40002000 	.word	0x40002000

08005c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	f023 0201 	bic.w	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f023 030a 	bic.w	r3, r3, #10
 8005ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b087      	sub	sp, #28
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f023 0210 	bic.w	r2, r3, #16
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	031b      	lsls	r3, r3, #12
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	693a      	ldr	r2, [r7, #16]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	f043 0307 	orr.w	r3, r3, #7
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	609a      	str	r2, [r3, #8]
}
 8005d4c:	bf00      	nop
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b087      	sub	sp, #28
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	021a      	lsls	r2, r3, #8
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	609a      	str	r2, [r3, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e05a      	b.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a21      	ldr	r2, [pc, #132]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d022      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfc:	d01d      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1d      	ldr	r2, [pc, #116]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d018      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1a      	ldr	r2, [pc, #104]	; (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00e      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a18      	ldr	r2, [pc, #96]	; (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	; (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a15      	ldr	r2, [pc, #84]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d10c      	bne.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40010400 	.word	0x40010400
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40001800 	.word	0x40001800

08005e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e03f      	b.n	8005f4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fc fcae 	bl	8002840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2224      	movs	r2, #36	; 0x24
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68da      	ldr	r2, [r3, #12]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 fddb 	bl	8006ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b08a      	sub	sp, #40	; 0x28
 8005f56:	af02      	add	r7, sp, #8
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d17c      	bne.n	800606c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <HAL_UART_Transmit+0x2c>
 8005f78:	88fb      	ldrh	r3, [r7, #6]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e075      	b.n	800606e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_UART_Transmit+0x3e>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e06e      	b.n	800606e <HAL_UART_Transmit+0x11c>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2221      	movs	r2, #33	; 0x21
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fa6:	f7fc fd69 	bl	8002a7c <HAL_GetTick>
 8005faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	88fa      	ldrh	r2, [r7, #6]
 8005fb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc0:	d108      	bne.n	8005fd4 <HAL_UART_Transmit+0x82>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d104      	bne.n	8005fd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	e003      	b.n	8005fdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fe4:	e02a      	b.n	800603c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2180      	movs	r1, #128	; 0x80
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 fb1f 	bl	8006634 <UART_WaitOnFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e036      	b.n	800606e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10b      	bne.n	800601e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006014:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	3302      	adds	r3, #2
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	e007      	b.n	800602e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	3301      	adds	r3, #1
 800602c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1cf      	bne.n	8005fe6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2200      	movs	r2, #0
 800604e:	2140      	movs	r1, #64	; 0x40
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 faef 	bl	8006634 <UART_WaitOnFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e006      	b.n	800606e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e000      	b.n	800606e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3720      	adds	r7, #32
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b084      	sub	sp, #16
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	4613      	mov	r3, r2
 8006082:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b20      	cmp	r3, #32
 800608e:	d11d      	bne.n	80060cc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_UART_Receive_IT+0x26>
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e016      	b.n	80060ce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_UART_Receive_IT+0x38>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e00f      	b.n	80060ce <HAL_UART_Receive_IT+0x58>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	461a      	mov	r2, r3
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fb24 	bl	8006710 <UART_Start_Receive_IT>
 80060c8:	4603      	mov	r3, r0
 80060ca:	e000      	b.n	80060ce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b0ba      	sub	sp, #232	; 0xe8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060fe:	2300      	movs	r3, #0
 8006100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006104:	2300      	movs	r3, #0
 8006106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10f      	bne.n	800613e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800611e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <HAL_UART_IRQHandler+0x66>
 800612a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fc03 	bl	8006942 <UART_Receive_IT>
      return;
 800613c:	e256      	b.n	80065ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800613e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80de 	beq.w	8006304 <HAL_UART_IRQHandler+0x22c>
 8006148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006158:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 80d1 	beq.w	8006304 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00b      	beq.n	8006186 <HAL_UART_IRQHandler+0xae>
 800616e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f043 0201 	orr.w	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00b      	beq.n	80061aa <HAL_UART_IRQHandler+0xd2>
 8006192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	f043 0202 	orr.w	r2, r3, #2
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00b      	beq.n	80061ce <HAL_UART_IRQHandler+0xf6>
 80061b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d005      	beq.n	80061ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	f043 0204 	orr.w	r2, r3, #4
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d011      	beq.n	80061fe <HAL_UART_IRQHandler+0x126>
 80061da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061de:	f003 0320 	and.w	r3, r3, #32
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f043 0208 	orr.w	r2, r3, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 81ed 	beq.w	80065e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	f003 0320 	and.w	r3, r3, #32
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <HAL_UART_IRQHandler+0x14e>
 8006214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fb8e 	bl	8006942 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695b      	ldr	r3, [r3, #20]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006230:	2b40      	cmp	r3, #64	; 0x40
 8006232:	bf0c      	ite	eq
 8006234:	2301      	moveq	r3, #1
 8006236:	2300      	movne	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <HAL_UART_IRQHandler+0x17a>
 800624a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800624e:	2b00      	cmp	r3, #0
 8006250:	d04f      	beq.n	80062f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fa96 	bl	8006784 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006262:	2b40      	cmp	r3, #64	; 0x40
 8006264:	d141      	bne.n	80062ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3314      	adds	r3, #20
 800626c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800627c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3314      	adds	r3, #20
 800628e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006292:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800629e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1d9      	bne.n	8006266 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d013      	beq.n	80062e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	4a7d      	ldr	r2, [pc, #500]	; (80064b4 <HAL_UART_IRQHandler+0x3dc>)
 80062c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fc fd89 	bl	8002dde <HAL_DMA_Abort_IT>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062dc:	4610      	mov	r0, r2
 80062de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	e00e      	b.n	8006300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f990 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e8:	e00a      	b.n	8006300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f98c 	bl	8006608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f0:	e006      	b.n	8006300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f988 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062fe:	e170      	b.n	80065e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006300:	bf00      	nop
    return;
 8006302:	e16e      	b.n	80065e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006308:	2b01      	cmp	r3, #1
 800630a:	f040 814a 	bne.w	80065a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800630e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 8143 	beq.w	80065a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800631c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 813c 	beq.w	80065a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	60bb      	str	r3, [r7, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634a:	2b40      	cmp	r3, #64	; 0x40
 800634c:	f040 80b4 	bne.w	80064b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800635c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 8140 	beq.w	80065e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800636a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800636e:	429a      	cmp	r2, r3
 8006370:	f080 8139 	bcs.w	80065e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800637a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006386:	f000 8088 	beq.w	800649a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	330c      	adds	r3, #12
 8006390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	330c      	adds	r3, #12
 80063b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1d9      	bne.n	800638a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	3314      	adds	r3, #20
 80063dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e0:	e853 3f00 	ldrex	r3, [r3]
 80063e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	3314      	adds	r3, #20
 80063f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800640c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e1      	bne.n	80063d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	3314      	adds	r3, #20
 8006418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800641c:	e853 3f00 	ldrex	r3, [r3]
 8006420:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3314      	adds	r3, #20
 8006432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800643c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e3      	bne.n	8006412 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	330c      	adds	r3, #12
 800645e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006462:	e853 3f00 	ldrex	r3, [r3]
 8006466:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800646a:	f023 0310 	bic.w	r3, r3, #16
 800646e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800647c:	65ba      	str	r2, [r7, #88]	; 0x58
 800647e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006480:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006482:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800648a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e3      	bne.n	8006458 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	4618      	mov	r0, r3
 8006496:	f7fc fc32 	bl	8002cfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f8b6 	bl	800661c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064b0:	e099      	b.n	80065e6 <HAL_UART_IRQHandler+0x50e>
 80064b2:	bf00      	nop
 80064b4:	0800684b 	.word	0x0800684b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 808b 	beq.w	80065ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8086 	beq.w	80065ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	330c      	adds	r3, #12
 80064e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006502:	647a      	str	r2, [r7, #68]	; 0x44
 8006504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e3      	bne.n	80064de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3314      	adds	r3, #20
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	623b      	str	r3, [r7, #32]
   return(result);
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	f023 0301 	bic.w	r3, r3, #1
 800652c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3314      	adds	r3, #20
 8006536:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800653a:	633a      	str	r2, [r7, #48]	; 0x30
 800653c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e3      	bne.n	8006516 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	e853 3f00 	ldrex	r3, [r3]
 800656a:	60fb      	str	r3, [r7, #12]
   return(result);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0310 	bic.w	r3, r3, #16
 8006572:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	330c      	adds	r3, #12
 800657c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006580:	61fa      	str	r2, [r7, #28]
 8006582:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	69b9      	ldr	r1, [r7, #24]
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	617b      	str	r3, [r7, #20]
   return(result);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e3      	bne.n	800655c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f83e 	bl	800661c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80065a0:	e023      	b.n	80065ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <HAL_UART_IRQHandler+0x4ea>
 80065ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f959 	bl	8006872 <UART_Transmit_IT>
    return;
 80065c0:	e014      	b.n	80065ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00e      	beq.n	80065ec <HAL_UART_IRQHandler+0x514>
 80065ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d008      	beq.n	80065ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f999 	bl	8006912 <UART_EndTransmit_IT>
    return;
 80065e0:	e004      	b.n	80065ec <HAL_UART_IRQHandler+0x514>
    return;
 80065e2:	bf00      	nop
 80065e4:	e002      	b.n	80065ec <HAL_UART_IRQHandler+0x514>
      return;
 80065e6:	bf00      	nop
 80065e8:	e000      	b.n	80065ec <HAL_UART_IRQHandler+0x514>
      return;
 80065ea:	bf00      	nop
  }
}
 80065ec:	37e8      	adds	r7, #232	; 0xe8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop

080065f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b090      	sub	sp, #64	; 0x40
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	4613      	mov	r3, r2
 8006642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006644:	e050      	b.n	80066e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664c:	d04c      	beq.n	80066e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <UART_WaitOnFlagUntilTimeout+0x30>
 8006654:	f7fc fa12 	bl	8002a7c <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006660:	429a      	cmp	r2, r3
 8006662:	d241      	bcs.n	80066e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	330c      	adds	r3, #12
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006684:	637a      	str	r2, [r7, #52]	; 0x34
 8006686:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800668a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e5      	bne.n	8006664 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3314      	adds	r3, #20
 800669e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	613b      	str	r3, [r7, #16]
   return(result);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	f023 0301 	bic.w	r3, r3, #1
 80066ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3314      	adds	r3, #20
 80066b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066b8:	623a      	str	r2, [r7, #32]
 80066ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	69f9      	ldr	r1, [r7, #28]
 80066be:	6a3a      	ldr	r2, [r7, #32]
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e5      	bne.n	8006698 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e00f      	b.n	8006708 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4013      	ands	r3, r2
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	bf0c      	ite	eq
 80066f8:	2301      	moveq	r3, #1
 80066fa:	2300      	movne	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	461a      	mov	r2, r3
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	429a      	cmp	r2, r3
 8006704:	d09f      	beq.n	8006646 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3740      	adds	r7, #64	; 0x40
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	88fa      	ldrh	r2, [r7, #6]
 800672e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2222      	movs	r2, #34	; 0x22
 800673a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006754:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695a      	ldr	r2, [r3, #20]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0201 	orr.w	r2, r2, #1
 8006764:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0220 	orr.w	r2, r2, #32
 8006774:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b095      	sub	sp, #84	; 0x54
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067ac:	643a      	str	r2, [r7, #64]	; 0x40
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e5      	bne.n	800678c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3314      	adds	r3, #20
 80067c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	e853 3f00 	ldrex	r3, [r3]
 80067ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f023 0301 	bic.w	r3, r3, #1
 80067d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3314      	adds	r3, #20
 80067de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e5      	bne.n	80067c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d119      	bne.n	8006830 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	60bb      	str	r3, [r7, #8]
   return(result);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f023 0310 	bic.w	r3, r3, #16
 8006812:	647b      	str	r3, [r7, #68]	; 0x44
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	330c      	adds	r3, #12
 800681a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800681c:	61ba      	str	r2, [r7, #24]
 800681e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6979      	ldr	r1, [r7, #20]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	613b      	str	r3, [r7, #16]
   return(result);
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e5      	bne.n	80067fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800683e:	bf00      	nop
 8006840:	3754      	adds	r7, #84	; 0x54
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f7ff fecf 	bl	8006608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b21      	cmp	r3, #33	; 0x21
 8006884:	d13e      	bne.n	8006904 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688e:	d114      	bne.n	80068ba <UART_Transmit_IT+0x48>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d110      	bne.n	80068ba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	1c9a      	adds	r2, r3, #2
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	621a      	str	r2, [r3, #32]
 80068b8:	e008      	b.n	80068cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6211      	str	r1, [r2, #32]
 80068c4:	781a      	ldrb	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4619      	mov	r1, r3
 80068da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10f      	bne.n	8006900 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	e000      	b.n	8006906 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
  }
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006928:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff fe5e 	bl	80065f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b08c      	sub	sp, #48	; 0x30
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b22      	cmp	r3, #34	; 0x22
 8006954:	f040 80ab 	bne.w	8006aae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006960:	d117      	bne.n	8006992 <UART_Receive_IT+0x50>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d113      	bne.n	8006992 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	b29b      	uxth	r3, r3
 800697c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006980:	b29a      	uxth	r2, r3
 8006982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006984:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	1c9a      	adds	r2, r3, #2
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28
 8006990:	e026      	b.n	80069e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006998:	2300      	movs	r3, #0
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a4:	d007      	beq.n	80069b6 <UART_Receive_IT+0x74>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <UART_Receive_IT+0x82>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d106      	bne.n	80069c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e008      	b.n	80069d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4619      	mov	r1, r3
 80069ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d15a      	bne.n	8006aaa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0220 	bic.w	r2, r2, #32
 8006a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695a      	ldr	r2, [r3, #20]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0201 	bic.w	r2, r2, #1
 8006a22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d135      	bne.n	8006aa0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	330c      	adds	r3, #12
 8006a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	613b      	str	r3, [r7, #16]
   return(result);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f023 0310 	bic.w	r3, r3, #16
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a5a:	623a      	str	r2, [r7, #32]
 8006a5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	69f9      	ldr	r1, [r7, #28]
 8006a60:	6a3a      	ldr	r2, [r7, #32]
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e5      	bne.n	8006a3a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d10a      	bne.n	8006a92 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a96:	4619      	mov	r1, r3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff fdbf 	bl	800661c <HAL_UARTEx_RxEventCallback>
 8006a9e:	e002      	b.n	8006aa6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7fb fe85 	bl	80027b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e002      	b.n	8006ab0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3730      	adds	r7, #48	; 0x30
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	b09f      	sub	sp, #124	; 0x7c
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ace:	68d9      	ldr	r1, [r3, #12]
 8006ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	ea40 0301 	orr.w	r3, r0, r1
 8006ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006afc:	f021 010c 	bic.w	r1, r1, #12
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b06:	430b      	orrs	r3, r1
 8006b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b16:	6999      	ldr	r1, [r3, #24]
 8006b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	ea40 0301 	orr.w	r3, r0, r1
 8006b20:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	4bc5      	ldr	r3, [pc, #788]	; (8006e3c <UART_SetConfig+0x384>)
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d004      	beq.n	8006b36 <UART_SetConfig+0x7e>
 8006b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	4bc3      	ldr	r3, [pc, #780]	; (8006e40 <UART_SetConfig+0x388>)
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d103      	bne.n	8006b3e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b36:	f7fe f879 	bl	8004c2c <HAL_RCC_GetPCLK2Freq>
 8006b3a:	6778      	str	r0, [r7, #116]	; 0x74
 8006b3c:	e002      	b.n	8006b44 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b3e:	f7fe f861 	bl	8004c04 <HAL_RCC_GetPCLK1Freq>
 8006b42:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b46:	69db      	ldr	r3, [r3, #28]
 8006b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4c:	f040 80b6 	bne.w	8006cbc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b52:	461c      	mov	r4, r3
 8006b54:	f04f 0500 	mov.w	r5, #0
 8006b58:	4622      	mov	r2, r4
 8006b5a:	462b      	mov	r3, r5
 8006b5c:	1891      	adds	r1, r2, r2
 8006b5e:	6439      	str	r1, [r7, #64]	; 0x40
 8006b60:	415b      	adcs	r3, r3
 8006b62:	647b      	str	r3, [r7, #68]	; 0x44
 8006b64:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b68:	1912      	adds	r2, r2, r4
 8006b6a:	eb45 0303 	adc.w	r3, r5, r3
 8006b6e:	f04f 0000 	mov.w	r0, #0
 8006b72:	f04f 0100 	mov.w	r1, #0
 8006b76:	00d9      	lsls	r1, r3, #3
 8006b78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b7c:	00d0      	lsls	r0, r2, #3
 8006b7e:	4602      	mov	r2, r0
 8006b80:	460b      	mov	r3, r1
 8006b82:	1911      	adds	r1, r2, r4
 8006b84:	6639      	str	r1, [r7, #96]	; 0x60
 8006b86:	416b      	adcs	r3, r5
 8006b88:	667b      	str	r3, [r7, #100]	; 0x64
 8006b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	1891      	adds	r1, r2, r2
 8006b96:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b98:	415b      	adcs	r3, r3
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ba0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ba4:	f7f9 fb10 	bl	80001c8 <__aeabi_uldivmod>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4ba5      	ldr	r3, [pc, #660]	; (8006e44 <UART_SetConfig+0x38c>)
 8006bae:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	011e      	lsls	r6, r3, #4
 8006bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bb8:	461c      	mov	r4, r3
 8006bba:	f04f 0500 	mov.w	r5, #0
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	1891      	adds	r1, r2, r2
 8006bc4:	6339      	str	r1, [r7, #48]	; 0x30
 8006bc6:	415b      	adcs	r3, r3
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006bce:	1912      	adds	r2, r2, r4
 8006bd0:	eb45 0303 	adc.w	r3, r5, r3
 8006bd4:	f04f 0000 	mov.w	r0, #0
 8006bd8:	f04f 0100 	mov.w	r1, #0
 8006bdc:	00d9      	lsls	r1, r3, #3
 8006bde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006be2:	00d0      	lsls	r0, r2, #3
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	1911      	adds	r1, r2, r4
 8006bea:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bec:	416b      	adcs	r3, r5
 8006bee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	f04f 0300 	mov.w	r3, #0
 8006bfa:	1891      	adds	r1, r2, r2
 8006bfc:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bfe:	415b      	adcs	r3, r3
 8006c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c0a:	f7f9 fadd 	bl	80001c8 <__aeabi_uldivmod>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4b8c      	ldr	r3, [pc, #560]	; (8006e44 <UART_SetConfig+0x38c>)
 8006c14:	fba3 1302 	umull	r1, r3, r3, r2
 8006c18:	095b      	lsrs	r3, r3, #5
 8006c1a:	2164      	movs	r1, #100	; 0x64
 8006c1c:	fb01 f303 	mul.w	r3, r1, r3
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	3332      	adds	r3, #50	; 0x32
 8006c26:	4a87      	ldr	r2, [pc, #540]	; (8006e44 <UART_SetConfig+0x38c>)
 8006c28:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2c:	095b      	lsrs	r3, r3, #5
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c34:	441e      	add	r6, r3
 8006c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	1894      	adds	r4, r2, r2
 8006c44:	623c      	str	r4, [r7, #32]
 8006c46:	415b      	adcs	r3, r3
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c4e:	1812      	adds	r2, r2, r0
 8006c50:	eb41 0303 	adc.w	r3, r1, r3
 8006c54:	f04f 0400 	mov.w	r4, #0
 8006c58:	f04f 0500 	mov.w	r5, #0
 8006c5c:	00dd      	lsls	r5, r3, #3
 8006c5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c62:	00d4      	lsls	r4, r2, #3
 8006c64:	4622      	mov	r2, r4
 8006c66:	462b      	mov	r3, r5
 8006c68:	1814      	adds	r4, r2, r0
 8006c6a:	653c      	str	r4, [r7, #80]	; 0x50
 8006c6c:	414b      	adcs	r3, r1
 8006c6e:	657b      	str	r3, [r7, #84]	; 0x54
 8006c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	461a      	mov	r2, r3
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	1891      	adds	r1, r2, r2
 8006c7c:	61b9      	str	r1, [r7, #24]
 8006c7e:	415b      	adcs	r3, r3
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c8a:	f7f9 fa9d 	bl	80001c8 <__aeabi_uldivmod>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	4b6c      	ldr	r3, [pc, #432]	; (8006e44 <UART_SetConfig+0x38c>)
 8006c94:	fba3 1302 	umull	r1, r3, r3, r2
 8006c98:	095b      	lsrs	r3, r3, #5
 8006c9a:	2164      	movs	r1, #100	; 0x64
 8006c9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	3332      	adds	r3, #50	; 0x32
 8006ca6:	4a67      	ldr	r2, [pc, #412]	; (8006e44 <UART_SetConfig+0x38c>)
 8006ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cac:	095b      	lsrs	r3, r3, #5
 8006cae:	f003 0207 	and.w	r2, r3, #7
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4432      	add	r2, r6
 8006cb8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cba:	e0b9      	b.n	8006e30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cbe:	461c      	mov	r4, r3
 8006cc0:	f04f 0500 	mov.w	r5, #0
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	1891      	adds	r1, r2, r2
 8006cca:	6139      	str	r1, [r7, #16]
 8006ccc:	415b      	adcs	r3, r3
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006cd4:	1912      	adds	r2, r2, r4
 8006cd6:	eb45 0303 	adc.w	r3, r5, r3
 8006cda:	f04f 0000 	mov.w	r0, #0
 8006cde:	f04f 0100 	mov.w	r1, #0
 8006ce2:	00d9      	lsls	r1, r3, #3
 8006ce4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ce8:	00d0      	lsls	r0, r2, #3
 8006cea:	4602      	mov	r2, r0
 8006cec:	460b      	mov	r3, r1
 8006cee:	eb12 0804 	adds.w	r8, r2, r4
 8006cf2:	eb43 0905 	adc.w	r9, r3, r5
 8006cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f04f 0100 	mov.w	r1, #0
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	008b      	lsls	r3, r1, #2
 8006d0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d0e:	0082      	lsls	r2, r0, #2
 8006d10:	4640      	mov	r0, r8
 8006d12:	4649      	mov	r1, r9
 8006d14:	f7f9 fa58 	bl	80001c8 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4b49      	ldr	r3, [pc, #292]	; (8006e44 <UART_SetConfig+0x38c>)
 8006d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d22:	095b      	lsrs	r3, r3, #5
 8006d24:	011e      	lsls	r6, r3, #4
 8006d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f04f 0100 	mov.w	r1, #0
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	1894      	adds	r4, r2, r2
 8006d34:	60bc      	str	r4, [r7, #8]
 8006d36:	415b      	adcs	r3, r3
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d3e:	1812      	adds	r2, r2, r0
 8006d40:	eb41 0303 	adc.w	r3, r1, r3
 8006d44:	f04f 0400 	mov.w	r4, #0
 8006d48:	f04f 0500 	mov.w	r5, #0
 8006d4c:	00dd      	lsls	r5, r3, #3
 8006d4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d52:	00d4      	lsls	r4, r2, #3
 8006d54:	4622      	mov	r2, r4
 8006d56:	462b      	mov	r3, r5
 8006d58:	1814      	adds	r4, r2, r0
 8006d5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d5c:	414b      	adcs	r3, r1
 8006d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f04f 0100 	mov.w	r1, #0
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	008b      	lsls	r3, r1, #2
 8006d74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d78:	0082      	lsls	r2, r0, #2
 8006d7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d7e:	f7f9 fa23 	bl	80001c8 <__aeabi_uldivmod>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4b2f      	ldr	r3, [pc, #188]	; (8006e44 <UART_SetConfig+0x38c>)
 8006d88:	fba3 1302 	umull	r1, r3, r3, r2
 8006d8c:	095b      	lsrs	r3, r3, #5
 8006d8e:	2164      	movs	r1, #100	; 0x64
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	3332      	adds	r3, #50	; 0x32
 8006d9a:	4a2a      	ldr	r2, [pc, #168]	; (8006e44 <UART_SetConfig+0x38c>)
 8006d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006da6:	441e      	add	r6, r3
 8006da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006daa:	4618      	mov	r0, r3
 8006dac:	f04f 0100 	mov.w	r1, #0
 8006db0:	4602      	mov	r2, r0
 8006db2:	460b      	mov	r3, r1
 8006db4:	1894      	adds	r4, r2, r2
 8006db6:	603c      	str	r4, [r7, #0]
 8006db8:	415b      	adcs	r3, r3
 8006dba:	607b      	str	r3, [r7, #4]
 8006dbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc0:	1812      	adds	r2, r2, r0
 8006dc2:	eb41 0303 	adc.w	r3, r1, r3
 8006dc6:	f04f 0400 	mov.w	r4, #0
 8006dca:	f04f 0500 	mov.w	r5, #0
 8006dce:	00dd      	lsls	r5, r3, #3
 8006dd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dd4:	00d4      	lsls	r4, r2, #3
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	462b      	mov	r3, r5
 8006dda:	eb12 0a00 	adds.w	sl, r2, r0
 8006dde:	eb43 0b01 	adc.w	fp, r3, r1
 8006de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	4618      	mov	r0, r3
 8006de8:	f04f 0100 	mov.w	r1, #0
 8006dec:	f04f 0200 	mov.w	r2, #0
 8006df0:	f04f 0300 	mov.w	r3, #0
 8006df4:	008b      	lsls	r3, r1, #2
 8006df6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dfa:	0082      	lsls	r2, r0, #2
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	4659      	mov	r1, fp
 8006e00:	f7f9 f9e2 	bl	80001c8 <__aeabi_uldivmod>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4b0e      	ldr	r3, [pc, #56]	; (8006e44 <UART_SetConfig+0x38c>)
 8006e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8006e0e:	095b      	lsrs	r3, r3, #5
 8006e10:	2164      	movs	r1, #100	; 0x64
 8006e12:	fb01 f303 	mul.w	r3, r1, r3
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	3332      	adds	r3, #50	; 0x32
 8006e1c:	4a09      	ldr	r2, [pc, #36]	; (8006e44 <UART_SetConfig+0x38c>)
 8006e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	f003 020f 	and.w	r2, r3, #15
 8006e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4432      	add	r2, r6
 8006e2e:	609a      	str	r2, [r3, #8]
}
 8006e30:	bf00      	nop
 8006e32:	377c      	adds	r7, #124	; 0x7c
 8006e34:	46bd      	mov	sp, r7
 8006e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3a:	bf00      	nop
 8006e3c:	40011000 	.word	0x40011000
 8006e40:	40011400 	.word	0x40011400
 8006e44:	51eb851f 	.word	0x51eb851f

08006e48 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e60:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <FSMC_NORSRAM_Init+0xa0>)
 8006e66:	4013      	ands	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006e72:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006e78:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006e7e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006e84:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006e8a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006e90:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006e96:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006e9c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006ea2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006ea8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006eae:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006eb4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d103      	bne.n	8006ecc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eca:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	fff00080 	.word	0xfff00080

08006eec <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f06:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006f0e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f1a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006f22:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006f2a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	3b01      	subs	r3, #1
 8006f32:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006f34:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	3b02      	subs	r3, #2
 8006f3c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006f3e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f44:	4313      	orrs	r3, r2
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6979      	ldr	r1, [r7, #20]
 8006f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f80:	d122      	bne.n	8006fc8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006f9e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006fa6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006fae:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006fb4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6979      	ldr	r1, [r7, #20]
 8006fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006fc6:	e005      	b.n	8006fd4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	cff00000 	.word	0xcff00000

08006fe8 <__libc_init_array>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4d0d      	ldr	r5, [pc, #52]	; (8007020 <__libc_init_array+0x38>)
 8006fec:	4c0d      	ldr	r4, [pc, #52]	; (8007024 <__libc_init_array+0x3c>)
 8006fee:	1b64      	subs	r4, r4, r5
 8006ff0:	10a4      	asrs	r4, r4, #2
 8006ff2:	2600      	movs	r6, #0
 8006ff4:	42a6      	cmp	r6, r4
 8006ff6:	d109      	bne.n	800700c <__libc_init_array+0x24>
 8006ff8:	4d0b      	ldr	r5, [pc, #44]	; (8007028 <__libc_init_array+0x40>)
 8006ffa:	4c0c      	ldr	r4, [pc, #48]	; (800702c <__libc_init_array+0x44>)
 8006ffc:	f000 f820 	bl	8007040 <_init>
 8007000:	1b64      	subs	r4, r4, r5
 8007002:	10a4      	asrs	r4, r4, #2
 8007004:	2600      	movs	r6, #0
 8007006:	42a6      	cmp	r6, r4
 8007008:	d105      	bne.n	8007016 <__libc_init_array+0x2e>
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007010:	4798      	blx	r3
 8007012:	3601      	adds	r6, #1
 8007014:	e7ee      	b.n	8006ff4 <__libc_init_array+0xc>
 8007016:	f855 3b04 	ldr.w	r3, [r5], #4
 800701a:	4798      	blx	r3
 800701c:	3601      	adds	r6, #1
 800701e:	e7f2      	b.n	8007006 <__libc_init_array+0x1e>
 8007020:	08009ff8 	.word	0x08009ff8
 8007024:	08009ff8 	.word	0x08009ff8
 8007028:	08009ff8 	.word	0x08009ff8
 800702c:	08009ffc 	.word	0x08009ffc

08007030 <memset>:
 8007030:	4402      	add	r2, r0
 8007032:	4603      	mov	r3, r0
 8007034:	4293      	cmp	r3, r2
 8007036:	d100      	bne.n	800703a <memset+0xa>
 8007038:	4770      	bx	lr
 800703a:	f803 1b01 	strb.w	r1, [r3], #1
 800703e:	e7f9      	b.n	8007034 <memset+0x4>

08007040 <_init>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	bf00      	nop
 8007044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007046:	bc08      	pop	{r3}
 8007048:	469e      	mov	lr, r3
 800704a:	4770      	bx	lr

0800704c <_fini>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	bf00      	nop
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr
